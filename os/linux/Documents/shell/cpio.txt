cpio命令详解

cpio 可以从 cpio 或 tar 格式的归档包中存入和读取文件, 归档包是一种包含其他文件和有关信息的文件。 有关信息包括：文件名, 属主, 时标(timestamp), 和访问权限。 归档包可以是磁盘上的 其他文件, 也可以是磁带或管道。

cpio命令详细用法

cpio - 存取归档包中的文件 

语法 Syntax
cpio -o [ -aBLuvV ] [ -C bufsize ] [ -c | -H format ][ -K volumesize ] [ [ -O file [, file ... ] ] [ -M message ] ] [ -Pifd,ofd ] 

cpio -i [ -6AbBcdfkmnqrsStTuvV ] [-C bufsize ] [ [ -I file [, file ... ] ] 
[ -M message ] ] [ -Pifd,ofd ] [ pattern ... ] 

cpio -p [ -adlLmruvV ] [ -Pifd,ofd ] directory 

描述(DEscriptION) 

cpio 可以从 cpio 或 tar 格式的归档包中存入和读取文件, 归档包是一种包含其他文件和有关信息的文件。 有关信息包括：文件名, 属主, 时标(timestamp), 和访问权限。 归档包可以是磁盘上的 其他文件, 也可以是磁带或管道。 

cpio 有三种操作模式: 
在copy-out模式中, cpio 把文件复制到归档包中。它从标准输入获得文件名列表 (一行一个), 把归档包写到标准输出。生成文件名列表的典型方法是使用find 命令; 你可能要在 find 后面用上 -depth选项, 减少因为进入没有访问权限的目录而引起的麻烦。 
在copy-in模式中, cpio 从归档包里读取文件, 或者列出归档包里的内容。它从标准输入读入归档包。任何不是选项的命令行参数被视为shell的通配符模式串 (globbing pattern); 在归档包中, 只有文件名匹配这些模式串的文件才能复制出来。 和 shell 中不一样, 文件名起始处的 '.' 可以匹配模式串起始处的通配符, 文件名中的 '/' 也可以匹配通配符。 如果没有给出模式串, 那么将读出所有文件。 
在copy-pass模式中, cpio把文件从一棵目录树复制到另一棵, 它结合了 copy-in 和 copy-out 的操作, 但不使用归档包。 cpio从标准输入读取欲复制的文件名列表; 目标目录作为非选项的命令行参数给出。 

cpio支持下列的归档格式: binary, old ASCII, new ASCII, crc, HPUX binary, HPUX old ASCII, old tar, 和 POSIX.1 tar。 
"binary"格式是过时格式, 因为它保存文件信息的方法无法应用在不同体系的机器间移植。"old ASCII" 格式可以跨平台使用, 但是不能用于超过 65536 个 i 节点的文件系统中。 "new ASCII" 格式可以跨平台使用, 也适用于任意大小的文件系统, 但不是所有版本的 cpio 都支持; 目前只有 GNU 和 System VR4 的 cpio 支持。"crc" 格式 类似于 "new ASCII" 格式, 同时对每个文件计算校验和。cpio 在创建归档包时算出校验和, 解开文件时进行校验。 "HPUX" 格式用于兼容 HP UNIX 的 cpio, 它用了独特的方法来保存设备文件。 
"tar" 格式用以兼容 tar 程序。它不能归档文件名超过 100 个字符的文件, 也不能归档特殊文件 (块设备或字符设备)。 "POSIX.1 tar" 格式不能归档文件名超过 255 个字符的文件(小于, 除非文件名的最右边有一个 "/")。 
缺省情况下, cpio 为了兼容老式的 cpio 程序, 创建 "binary" 格式的归档包。当展开归档包时, cpio 能够自动识别归档包的格式, 而且可以读取在其他字节顺序的机器上创建的归档包。 

cpio 的某些选项只能用在对应的操作模式上; 参见总览小节, 里面列出了什么选项可以用在什么模式上。 

选项 (OPTIONS) 
-0, --null 在copy-out 和 copy-pass 模式中, 认为输入的文件名以 null字符结尾,而不是换行符, 这样即使文件名中包含换行符, 也不影响归档。 GNU find 是生成 null 结尾文件名列表的方法之一。 

-a, --reset-access-time 读取完文件后重置文件的访问时间, 这样看上去就象没被访问过一样。 

-A, --append 追加到已经存在的归档包中。仅用于 copy-out模式。该归档包必须是用 -O 或 -F (--file) 选项指定的磁盘文件。 

-b, --swap 在 copy-in 模式中, 颠倒数据中字中的半字和半字中的字节顺序。 相当于 -sS 使用这个选项，可以在大端数和小端数机器之间转换 32 位整数。 

-B 把 I/O 块大小设置成 5120 字节，最初的块大小是 512 字节。 
--block-size=BLOCK-SIZE 设置 I/O 块 大小 为 BLOCK-SIZE * 512 字节。 

-c 使用老式的跨平台 (ASCII) 归档格式。 

-C IO-SIZE, --io-size=IO-SIZE 设置 I/O 块大小为 IO-SIZE 字节。 

-d, --make-directories 在需要的地方创建开始目录。 

-E FILE, --pattern-file=FILE 在 copy-in 模式中, 从 FILE 中读取用于匹配文件名的模式串, FILE 中的内容就象 cpio 的非选项参数一样看待。 

-f, --nonmatching 只复制那些不匹配任何给定的模式串的文件。 

-F, --file=archive 使用归档文件名, 而不是标准输入或输出。 如果把其他机器上的磁带机作成归档文件使用, 文件名要用 "HOSTNAME:" 开始。 主机名前面可以加上用户名和一个 '@', 作为访问远程磁带机的用户 (如果你有这样的权限, 一般在用户的 ~/.rhosts 文件中会有这么一项)。 

--force-local 和 -F, -I, 或 -O, 一起用, 即使文件名中含有一个冒号,也把归档文件看作本地文件, 一般说来冒号指出一个远程主机名字。 

-H FORMAT, --format=FORMAT 使用归档格式 FORMAT。 有效的格式在下面列出, 大小写均可. "copy-in" 模式的缺省动作是自动检测归档格式, "copy-out" 的缺省格式是 "bin"。 
bin 老式的 binary 格式。 
odc 老式的 (POSIX.1) 跨平台格式。 
newc 新型 (SVR4) 跨平台格式, 支持大于 65536 i节点的文件系统。 
crc　新型 (SVR4) 跨平台格式, 并且计算校验和。 
tar 老式的 tar 格式。 
ustar POSIX.1 tar 格式, 也能识别 GNU tar 归档文件, 它们相似但不全相同。 
hpbin HP UNIX 上的 cpio 使用的老式的 binary 格式。(用独特的方法储存设备文件) 
hpodc HP UNIX 上的 cpio 使用的跨平台格式。 (用独特的方法储存设备文件) 

-i, --extract 进入 copy-in 模式。 

-I archive 使用归档文件名, 而不是标准输入。 如果把其他机器上的磁带机作成归档文件, 文件名要用 "HOSTNAME:" 开始。主机名前面可以加上用户名和一个 '@', 作为 访问远程 磁带机的用户 (如果你有这样的权限, 一般在用户的 ~/.rhosts 文件中会有这么一项)。 

-k 无效操作; 只是用来兼容其他版本的 cpio。 

-l, --link 如果有可能, 连接文件, 而不是复制。 

-L, --dereference 解除符号连接的关联 (复制符号连接指向的 文件, 而不是连接本身)。 

-m, --preserve-modification-time 当创建文件时, 保留以前的文件修改时间。 

-M MESSAGE, --message=MESSAGE当备份介质(例如 磁带或软盘) 到达卷尾时, 显示一条消息, 提醒用户插入下一卷。如果 MESSAGE 包含字符串 "%d", 它被替换成当前卷号 (从 1 开始)。 

-n, --numeric-uid-gid 以详细方式 (verbose) 显示内容时, 用数字显示 UID 和 GID, 而不是翻译成名称。 

--no-absolute-filenames 在copy-in模式中, 即使它们在归档包中有绝对路径名。也在当前目录中创建所有相关文件, 

--no-preserve-owner 在 copy-in 和 copy-pass 模式中, 不改变文件的属主关系 (译注: 疑为不保留); 使它们属于展开它们的用户。这是普通用户的缺省行为, 因此 System V 的用户不致于无意中把文件泄露(give away)。 

-o, --create 进入 copy-out 模式。 

-O archive 使用归档文件名, 而不是标准输出。 如果把其他机器上的磁带机作成归档文件, 文件名要用 "HOSTNAME:" 开始。主机名前面可以加上用户名和一个 '@', 作为访问远程磁带机的用户 (如果你有这样的权限, 一般在用户的 ~/.rhosts 文件中会有这么一项)。 

--only-verify-crc 当在 copy-in 模式读入 CRC 格式的归档包时, 不展开里面的文件, 而只是测试文件的 CRC 码。 

-p, --pass-through 进入 copy-pass 模式。 

--quiet 不显示复制的块数。 

-r, --rename 交互式文件改名。 

-R [user][:.][group], --owner [user][:.][group] 在 copy-out 和 copy-pass 模式中, 把所有文件的属主设置为指定的用户和/或用户组。 无论用户还是用户组都必须存在。 如果省略用户组, 但是给出了分隔符 ":" 或 "。', 则使用给定用户登录时的用户组。 只有超级用户能够改变文件的属主。 

--sparse 在 copy-out 和 copy-pass 模式中, 把大块数据 0 的文件写成稀疏文件 (sparse file)。 

-s, --swap-bytes 在 copy-in 模式中, 交换文件中每一个半字(字节对) 中的字节。 

-S, --swap-halfwords 在 copy-in 模式中, 交换文件中每一个字(4字节) 中的半字。 

-t, --list 显示输入归档包的内容。 

-u, --unconditional 替换所有文件, 不再提问是否用旧文件替换已经存在的新文件。 

-v, --verbose 列出处理的文件, 加上 -t 选项可以列出一个 'ls -l' 风格的列表。在一个归档包内容的详细列表 (verbose) 中, 如果本地系统不存在归档文件的用户和用户组名称, 它们将被替换成其数字 UID和GID 对应于本地系统的用户和用户组名称。 

-V --dot 每处理一个文件, 显示一个 "."。 

--version 显示 cpio 程序的版本号, 然后退出。


--------------------------------------------------------------------------------

EXAMPLES
       When creating an archive, cpio takes the list of files to be processed from the standard input, and then sends the archive to the standard out-
       put, or to the device defined by the ‘-F’ option.  Usually find or ls is used to provide this list to the standard  input.   In  the  following
       example you can see the possibilities for archiving the contents of a single directory.
       % ls | cpio -ov > directory.cpio

       The ‘-o’ option creates the archive, and the ‘-v’ option prints the names of the files archived as they are added.  Notice that the options can
       be put together after a single ‘-’ or can be placed separately on the command line.  The ‘>’ redirects the cpio  output  to  the  file  ‘direc-
       tory.cpio’.

       If you wanted to archive an entire directory tree, the find command can provide the file list to cpio:
       % find . -print -depth | cpio -ov > tree.cpio

       This  will  take all the files in the current directory, the directories below and place them in the archive tree.cpio.  Again the ‘-o’ creates an archive, and the ‘-v’ option shows you the name of the files as they are archived.  see “Copy-out mode”.  Using the ‘.’ in the  find  statement will give you more flexibility when doing restores, as it will save file names with a relative path vice a hard wired, absolute path.  The ‘-depth’ option forces ‘find’ to print of the entries in a directory before printing the directory itself.  This limits the effects of restrictive directory permissions by printing the directory entries in a directory before the directory name itself.

       Extracting  an archive requires a bit more thought because cpio will not create directories by default.  Another characteristic, is it will not overwrite existing files unless you tell it to.
       % cpio -iv < directory.cpio

       This will retrieve the files archived in the file directory.cpio and place them in the present directory.  The ‘-i’ option extracts the archive and  the  ‘-v’ shows the file names as they are extracted.  If you are dealing with an archived directory tree, you need to use the ‘-d’ option to create directories as necessary, something like:
       % cpio -idv < tree.cpio

       This will take the contents of the archive tree.cpio and extract it to the current directory.  If you try to extract the files on top of  files of  the  same name that already exist (and have the same or later modification time) cpio will not extract the file unless told to do so by the -u option.  see “Copy-in mode”.

       In copy-pass mode, cpio copies files from one directory tree to another, combining the copy-out and copy-in steps  without  actually  using  an archive.  It reads the list of files to copy from the standard input; the directory into which it will copy them is given as a non-option argument.  see “Copy-pass mode”.
       % find . -depth -print0 | cpio --null -pvd new-dir

       The example shows copying the files of the present directory, and sub-directories to a new directory called new-dir.  Some new options are  the ‘-print0’  available  with GNU find, combined with the ‘--null’ option of cpio.  These two options act together to send file names between find and cpio, even if special characters are embedded in the file names. Another is ‘-p’, which tells cpio to pass  the  files  it  finds  to  the directory ‘new-dir’.
       

--------------------------------------------------------------------------------


tar 和cpio 类似，从备份来看二者基本等效。都能将文件存到磁带并取出文件。都能使用几乎所有介质，因为核心设备驱动处理低级设备操作，对用户级程序看来所有设备都差不多。有些unix
的软件包就是cpio压的。
cpio 用法举例:
带目录结构拷贝指定文件到指定目录:
find /backup/svr -name "63201.rpt" |cpio -pdl /print
将带目录结构的指定文件拷贝到一个指定的文件:
find . -name "63201.rpt" |cpio -ov 63201.cpio
从文件中恢复：
cpio -ivd 63201.cpio

为什么cpio比tar好？有这样几个原因。
1、cpio会保留硬连接（hard link），备份的时候这个很重要
2、cpio没有文件名长度的限制。确实，guntar在这一点上做过改进，允许使用长文件名（实际上是创建了一个临时文件用来保存实际的文件名），但是在非gnu的tar工具上仍然存在这个问题。
3、默认情况下，cpio保留时间戳
4、在编写脚本的时候，cpio可以更好的控制要操作哪些文件。因为cpio需要显式的制定要操作的文件列表，例如下面哪个更加容易理解？
find . -type f -name '*.sh' -print | cpio -o | gzip >sh.cpio.gz
这儿有一个需要特别注意的：对于包含大量文件的列表，不能将find放在反引号（`）内，因为命令行长度会超出长度限制，因此必须使用中间文件。find和tar分开跑很明显会使得速度减慢。
下面这个例子更加复杂，将一部分文件打包到一个文件中，其它部分打包到另外一个文件中：
find . -depth -print >/tmp/files  
egrep    '\.sh$' /tmp/files | cpio -o | gzip >with.cpio.gz  egrep -v '\.sh$' /tmp/files | cpio -o | gzip >without.cpio.gz  
   
同样的，find和tar分开跑会使得速度变慢。创建多个中间文件也搞出了更多的混乱。gnutar稍好些，但是它的命令行参数却是不兼容的。
5、如果有很多文件需要通过网络在两台机器之间复制，则可以并行的跑几个cpio。例如：
find . -depth -print >/tmp/files  
split /tmp/files  for F in /tmp/files?? ; do  
cat $F | cpio -o | ssh destination "cd /target && cpio -idum" &   done  
2.6内核中的initrd.img采用cpio压缩，不再是2.4内核使用的ext2格式，无法使用mount -o loop 挂载。需要使用gunzip解压缩，然后再使用cpio解包
cp /boot/initrd-***.img initrd.img.gz
gunzip initrd.img.gz
mkdir initrd
mv initrd.img initrd
cd initrd
cpio -ivmd  ../initrd.new.img
gzip ../initrd.new.img
再将其改名拷贝至/boot目录，重启就可以观察修改后的效果。重启后无法成功引导。这是因为生成的initrd.img不对。解决如下：
生成initrd
find . | cpio -o -H newc | gzip > /mnt/sda1/boot/initrd.img-2.6.18-4-686
注：-H newc 是必须的，否则内核会认为是ramdisk，而不是initramfs)


--------------------------------------------------------------------------------

高效同步数据的方法及效率测试--边打包边压缩边传输边解压20150105
原创 2015年01月05日 16:28:40

      有些时候在备份或者同步有很多文件的大目录时（比如几个GB或者几十个GB的数据库目录、log目录），直接scp的话花费的时间较长，虽然可以采用先压缩再传输再解压的方法，传输的数据量确实减少了，但压缩和解压也会耗费很多的时间，总体效果也不令人满意，昨天晚上突发奇想，由于之前做过流媒体视频点播的项目的经验，如果能像看高清视频一样只需要下载完视频文件的metadata头就可以实现边下载边播放，即渐进式下载（http://baike.baidu.com/link?url=fTWQYBTqQr1BisysCAkoqIytbwotfBYvFEMxEAlspRbNmE6b5lwVLNzA-qgw6yGlFgBepYBzqvUEb2tqQaehBK） ，那就完美了，今天在网上一搜linux还真行，兴奋之余做一下对比测试：


先上结论：

（1）总体来说，对于文本文件，压缩要比不压缩传输效率更高些，但效果不明显（因为瓶颈不在网络传输这块，而在于压缩，参见下文测试1与2，3与4的对比）；

（2）采用边打包边压缩边传输边解压的流式传输方式的话，传输效率能比直接scp/rsync的方式提高35%；

（3）具体到流式传输的ssh和nc的方式上，因为nc不需要用户验证、不需要加密传输的数据，效率稍微高一点，对比效果不明显（因为瓶颈不在网络传输这块，而在于压缩）；

（4）在实际使用中更倾向于采用ssh的方式，因为：可以采用push或者pull的方式，且一条命令搞定，同一个源可以有多个并发，而nc需要先在接受端监听端口，然后在发送端开始传输，需要分别执行2条命令。担心：如果在传输的同时有第三者同时向接收端的监听端口发送数据，容易造成数据的不完整性，但实际测试发现nc的接受端只能和一个发送端建立连接进行数据传输，如果正在传输数据，那么第三者发往改监听端口的数据将不会传输，只有新监听端口或者等传输完成后，再重新启用改端口进行传输，总之还是倾向于与ssh的方式。


测试环境：centos5.5  千兆局域网络

测试目录/var/log大小8.9GB

[root@cap131 ~]# du -h /var/log/
28K /var/log/prelink
8.0K /var/log/conman.old
8.0K /var/log/vbox
24K /var/log/cups
50M /var/log/redis
76K /var/log/nginx
6.1M /var/log/sa
8.0K /var/log/conman
8.0K /var/log/ppp
18M /var/log/audit
152K /var/log/php-fpm
8.8G /var/log/rabbitmq
12K /var/log/pm
16K /var/log/mail
8.9G /var/log/
[root@cap131 ~]# 


1、直接纯scp拷贝的时间（5‘20’‘）：

[root@cap131 ~]# time scp -r /var/log/ 192.168.1.130:/root/test-dir/

real 5m20.834s
user 3m29.049s
sys 0m41.038s


2、先打包压缩再传输再解压的时间（3’33‘’+14‘’+1‘19’‘=5’6‘’）：
纯压缩的时间：

[root@cap131 ~]# time tar czf  varlog.tar.gz /var/log
tar: Removing leading `/' from member names
real 3m33.740s
user 3m28.068s
sys 0m19.081s


纯压缩后的大小：

[root@cap130 test-dir]# du  -h ../varlog.tar.gz
399M ../varlog.tar.gz


纯传输压缩包的时间：

[root@cap131 ~]# time scp varlog.tar.gz 192.168.1.130:~
root@192.168.1.130's password:
varlog.tar.gz                                                                                                       100%  399MB  30.7MB/s   00:13

real 0m14.024s
user 0m9.510s
sys 0m1.283s


纯解压的时间

[root@cap131 ~]# time tar xzf varlog.tar.gz
real 1m19.916s
user 0m49.498s
sys 0m35.588s


3、直接rysnc不启用压缩功能的传输时间（5‘12’‘）：

[root@cap131 ~]# rsync -r /var/log/  192.168.1.130:/root/test-dir
rsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at rsync.c(260) [sender=2.6.8]
[root@cap131 ~]# time rsync -r /var/log/  192.168.1.130:/root/test-dir
root@192.168.1.130's password:
real 5m12.625s
user 3m55.503s
sys 0m34.568s


4、直接rsync启用压缩功能的传输时间（4’36‘’）：

[root@cap131 ~]# time rsync -zr /var/log/  192.168.1.130:/root/test-dir
real 4m35.991s
user 4m40.208s
sys 0m5.306s


5、边打包边压缩边传输边解压的时间（采用ssh远程执行命令的push方式）：

[root@cap131 ~]# time tar czf - /var/log  |ssh  192.168.1.130  tar xzf -  -C /root/test-dir/
tar: Removing leading `/' from member names
real 3m33.711s
user 3m37.066s
sys 0m22.210s


 边打包边压缩边传输边解压的时间（采用ssh远程执行命令的pull方式）：

[root@cap130 test-dir]# time ssh  192.168.1.131  tar czf  -  /var/log |tar xzf - -C /root/test-dir/
tar: Removing leading `/' from member names
real 3m33.772s
user 1m13.207s
sys 0m55.302s



6、边打包边压缩边传输边解压的时间（采用nc push的方式）：

接受端监听端口10086：

[root@cap130 test-dir]# nc -l 10086 |tar xzf - -C /root/test-dir/

发送端开始传输：

[root@cap131 ~]# time tar czf - /var/log |nc 192.168.1.130 10086
tar: Removing leading `/' from member names
real 3m31.218s
user 3m27.908s
sys 0m15.839s


边打包边压缩边传输边解压的时间（采用nc pull的方式）：

这种方式好像行不通！

