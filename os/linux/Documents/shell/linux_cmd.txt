--------------------------------------------------------------------------------

国外趴好几天终于搞定hd4600 dp 4k 60hz 并成功开启hdpi！
clover config 添加kextstopath
name：AppleIntelFramebufferAzul
Find  :  0300220d 00030303 00000002 00003001
Replace: 0300220d 00030303 00000004 00000003

--------------------------------------------------------------------------------

systemctl命令是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。
任务 	              旧指令 	                        新指令
使某服务自动启动 	    chkconfig --level 3 httpd on 	  systemctl enable httpd.service
使某服务不自动启动 	  chkconfig --level 3 httpd off 	systemctl disable httpd.service
检查服务状态 	        service httpd status 	          systemctl status httpd.service （服务详细信息） systemctl is-active httpd.service （仅显示是否 Active)
显示所有已启动的服务 	  chkconfig --list 	              systemctl list-units --type=service
启动某服务 	          service httpd start 	          systemctl start httpd.service
停止某服务 	          service httpd stop 	            systemctl stop httpd.service
重启某服务 	          service httpd restart 	        systemctl restart httpd.service


实例

1.启动nfs服务
systemctl start nfs-server.service

2.设置开机自启动
systemctl enable nfs-server.service

3.停止开机自启动
systemctl disable nfs-server.service

4.查看服务当前状态
systemctl status nfs-server.service

5.重新启动某服务
systemctl restart nfs-server.service

6.查看所有已启动的服务
systemctl list -units --type=service

开启防火墙22端口
iptables -I INPUT -p tcp --dport 22 -j accept

如果仍然有问题，就可能是SELinux导致的
关闭SElinux：
修改/etc/selinux/config文件中的SELINUX=””为disabled，然后重启。

彻底关闭防火墙：
sudo systemctl status firewalld.service
sudo systemctl stop firewalld.service          
sudo systemctl disable firewalld.service


--------------------------------------------------------------------------------

你可以通过下面命令建立软件包和 debconf 选择状态的本地副本。

# dpkg --get-selections '*' > selection.dpkg
# debconf-get-selections    > selection.debconf

这里，“*” 使 “selection.dpkg” 也包含 “purge” 的软件包。

你可以将这两个文件移动到另一个电脑，并通过下列命令安装它们。

# dselect update
# debconf-set-selections < myselection.debconf
# dpkg --set-selections  < myselection.dpkg
# apt-get -u dselect-upgrade    # or dselect install

如果你需要管理一个集群中的许多服务器，并且它们的配置几乎相同，你应该考虑使用专门的软件包，例如 fai 来管理整个系统。

--------------------------------------------------------------------------------

安装前的备份：

1、备份已安装软件包列表：
sudo dpkg --get-selections > /home/user/package.selections

2、备份Home下的用户文件夹
这个文件夹类似于Windows下的Documents And Settings，包含了用户数据和软件个性化设定。如果你已经将Home放在额外的分区，这一步就不必了。复制所有用户文件夹下的所有内容到另外的分区，注意要包含隐藏文件（Ctrl Hide）

3、备份软件源列表
将/etc/apt/文件夹下的sources.list拷贝出来保存即可。

安装后的恢复：

1、还原软件源列表
复制备份的Sources.list文件到新系统的/etc/apt/目录，覆盖原文件，并替换（Ctrl H）文档中的intrepid为jaunty。然后更新软件源（sudo apt-get update）。

2、重新下载安装之前系统中的软件，如果你安装的软件数量比较多，可能会花费较长时间。
sudo dpkg --set-selections selections && sudo apt-get dselect-upgrade

3、最后将备份的主文件夹（/home/用户名）粘贴并覆盖现有主文件夹。

用这个方法我们可以基本在不丢失现有系统和软件设置的情况下使用全新的Ubuntu。



# ------------------------------------------------------------------------------
# 安装新的debian系统

# fdisk分区
Device     Boot    Start      End  Sectors  Size Id Type
/dev/sdb1           2048   616447   614400  300M  c W95 FAT32 (LBA)
/dev/sdb2         616448 17393663 16777216    8G 83 Linux
/dev/sdb3       17393664 20971519  3577856  1.7G 82 Linux swap / Solaris

# 格式化分区
sudo mkdosfs /dev/sdb1
sudo mke2fs -t ext4 /dev/sdb2
sudo mkswap /dev/sdb3

sudo sync
sudo swapon /dev/sdb3
sudo mount /dev/sdb2 /mnt/debinst

# get到debootstrap
wget http://mirrors.163.com/debian/pool/main/d/debootstrap/debootstrap_1.0.93.tar.gz
tar -xf debootstrap_0.X.X_all.tar.gz
sudo debootstrap --arch amd64 stretch /mnt/debinst http://mirrors.tuna.tsinghua.edu.cn/debian
# sudo debootstrap --arch amd64 stretch /mnt/debinst http://ftp2.cn.debian.org/debian
# sudo debootstrap --arch amd64 stretch /mnt/debinst http://mirrors.163.com/debian

# mount 必要的文件系统     
sudo mount -t proc none /mnt/debinst/proc
sudo mount -t sysfs sys /mnt/debinst/sys

# chroot到新的文件系统
LANG=C.UTF-8 sudo chroot /mnt/debinst/ /bin/bash

# 对于/dev，可以如此：
sudo mount -o bind /dev /mnt/debinst/dev
# 也可以这样，推荐这种方式：
apt install makedev
cd /dev
MAKEDEV generic

# 编辑fstab文件
# /etc/fstab: static file system information.
#
# file system    mount point   type    options                  dump pass
/dev/sdb2        /             ext4    defaults                 0    1
/dev/sdb3        none          swap    sw                       0    0
proc             /proc         proc    defaults                 0    0

/dev/fd0         /media/floppy auto    noauto,rw,sync,user,exec 0    0
/dev/cdrom       /media/cdrom  iso9660 noauto,ro,user,exec      0    0

vi /etc/fstab 
mount -a

# 设置时区，/etc/adjtime文件内容如下：
# /etc/adjtime
0.0 0 0.0
0
UTC

vi /etc/adjtime
dpkg-reconfigure tzdata

# 配置网络
# 1, 先配置网卡，在/etc/network/interfaces文件中配置，内容如下：
######################################################################
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)
# See the interfaces(5) manpage for information on what options are
# available.
######################################################################

# We always want the loopback interface.
#
auto lo
iface lo inet loopback

# To use dhcp:
#
auto enp0s8
iface enp0s8 inet dhcp

# An example static IP setup: (broadcast and gateway are optional)
#
auto enp0s3
iface enp0s3 inet static
     address 192.168.0.1
     network 192.168.0.0
     netmask 255.255.255.0
     broadcast 192.168.0.255
#     gateway 192.168.0.1

# 2, 配置nameserver，在/etc/resolv.conf文件中，内容如下：
nameserver 192.168.1.1
# nameserver fe80::1%enp0s8

# 3, 在/etc/hostname中，设置hostname，内容如下：
# /etc/hostname
pxe_1

# 4, 在/etc/hosts中，内容如下：
# /etc/hosts
127.0.0.1       localhost
127.0.0.1       pxe_1
::1             localhost ip6-localhost ip6-loopback
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

# 配置debian的源
# /etc/apt/sources.list
deb http://mirrors.163.com/debian/ stretch main non-free contrib
deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib

apt update

# 安装内核
apt install linux-headers-`uname -r`
apt install linux-image-`uname -r`

# 用swap的UUID更新resume文件，内容如下：
vi /etc/initramfs-tools/conf.d/resume
RESUME=UUID=907e9d49-5d28-4769-a020-089abe811e35

# 重新配置kernel
dpkg-reconfigure linux-image-`uname -r`

# 安装grub
apt install grub-pc
# apt install grub-efi
# grub-install /dev/sda
# update-grub

# 配置locales
apt install locales
dpkg-reconfigure locales

# 增加用户，设置秘密，修改用户的登录shell，增加sudo权限
useradd xt -m
passwd xt
vi /etc/passwd

# 安装必要的软件
apt install net-tools sudo ssh man-db less dosfstools vim parallel build-essential bash-completion screen
vi /etc/sudoers

# 如果要安装更多的软件，可以如下：
tasksel install standard

sync & reboot

# end of 安装新的debian系统
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 配置debian系统的网络

# --使用ifconfig和route命令------
# 关闭网络接口。
ifconfig enp0s3 inet down

# 启动 eth0 并给予其新的 IP 地址和路由。
ifconfig enp0s3 inet up 192.168.0.111 netmask 255.255.255.0 broadcast 192.168.0.255
route add -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.1 dev enp0s3

# 更新后的路由表如下：
route
  Kernel IP routing table
  Destination  Gateway      Genmask        Flags Metric Ref Use Iface
  192.168.0.0  *            255.255.255.0  U     0      0     0 eth0
  10.0.0.0     192.168.0.1  255.0.0.0      UG    0      0     0 eth0

# --ip 和先前的 ifconfig 和 route 有相同功能的命令如下：-------
ip link show
ip route list
ip link set eth0 down
ip addr del dev eth0 local 192.168.0.3
ip addr add dev eth0 local 192.168.0.111/24 broadcast 192.168.0.255
ip link set eth0 up
ip route add dev eth0 to 10.0.0.0/8 src 192.168.0.111 via 192.168.0.1

# 运行的时候使用 help 参数，能让 ip 打印出命令的语法。 例如，ip link help 打印出：
     Usage: ip link set DEVICE { up | down | arp { on | off } |
                          dynamic { on | off } |
                          multicast { on | off } | txqueuelen PACKETS |
                          name NEWNAME |
                          address LLADDR | broadcast LLADDR |
                          mtu MTU }
            ip link show [ DEVICE ]

# --域名解析-------
# 域名解析器的工作是查找某个域名所对应的 IP 地址。大部分常用的域名解析器是 GNU C Library 中的 resovler 提供的功能(resolver(3))。另一个是由 libfiredns 软件包提供的 FireDNS resolver，还有其他的。

# GNU LIBC 的域名解析器对域名的解析是由 /etc/nsswitch.conf 中的 hosts 这一行配置决定的。该行列出了解析域名用的服务：例如 dns、files、nis、nisplus。参阅 nsswitch.conf(5)。 在使用 files 的情况下，域名解析器的行为是由 /etc/hosts 这个配置文件控制的。

# 在使用 dns 服务的情况下，域名解释器的行为也是由 /etc/resolv.conf 这个配置文件控制的。参阅 resolv.conf(5)。resolv.conf 的一个重要功能就是提供一个域名服务器的 IP 地址列表，通过查询这些服务器来获得域名解析。

# 如果你的域名服务器响应速度非常慢，你可能需要使用 nscd 来缓存域名解析器 libc6 查询到的结果。
sudo apt install nscd

# --使用 ifupdown 进行高级网络设置---------
# 为了让网络设置更加简单，Debian 提供了一个标准的高级网络设置工具，包含 ifup 和 ifdown 程序和 /etc/network/interfaces 文件。 [56] 如果你选择用 ifupdown 来配置你的网络，那么就不要同时使用底层工具去配置。这也意味着你不应该用其他高级配置工具，如 whereami、divine、intuitively 等。他们调用的也是底层配置工具。ifupdown 程序在设计的时候，是假设仅有这样一个程序会被用来设置网络接口的。

# 更新接口设置是执行：
ifdown eth0
editor /etc/network/interfaces  # 做你需要的调整
ifup eth0

# 假设你要配置一个以太网接口，使其拥有一个固定的 IP 地址 192.168.0.111。这个 IP 地址以 192.168.0 为开头，所以它肯定在一个 LAN 内。进一步假设 192.168.0.1 是 LAN 上面 Internet 网关的地址。编辑 /etc/network/interfaces，使其包含类似下面这段的内容：
iface eth0 inet static
       address 192.168.0.111
       netmask 255.255.255.0
       gateway 192.168.0.1

# 在接口被激活或是在激活之前，你都可以配置接口的其他部分或者进行其他操作。只要你在"up"和"down"那几行中设置合适的命令。
iface eth0 inet static
       address 192.168.0.111
       netmask 255.255.255.0
       gateway 192.168.0.1
       up route add -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.2 dev $IFACE
       down route del -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.2 dev $IFACE
       up echo Interface $IFACE going up | /usr/bin/logger -t ifup
       down echo Interface $IFACE Going down | /usr/bin/logger -t ifdown

# 你也可以选择把命令插入到 /etc/network/if-up.d 和 /etc/network/if-down.d 目录下的脚本中。这些脚本也能执行扩展的选项。详情参阅 interfaces(5)。例如，软件包 resolvconf 包含的脚本允许你在接口被激活的同时，往 /etc/resolv.conf 添加指定的 DNS 信息：
iface eth0 inet static
       address 192.168.0.111
       netmask 255.255.255.0
       gateway 192.168.0.1
       dns-search somedomain.org
       dns-nameservers 195.238.2.21 195.238.2.22

dns-search 选项的参数 somedomain.org 符合 resolv.conf(5) 中所说的 search 选项的参数。 dns-nameservers 选项的参数 195.238.2.21 和 195.238.2.22 符合选项 nameserver 的参数。其他可以识别的选项是 dns-domain 和 dns-sortlist。参阅管理域名服务器信息 – resolvconf, 第 10.4.2 节。 

# --网卡多个ip地址----------
# 使用虚拟接口，你可以设置一个以太网卡使其成为拥有很多 IP 子网的接口。例如，假设你的主机在 LAN 网络上(192.168.0.x/24)。你想要让主机连接到互联网，并用已经存在的以太网卡通过 DHCP 来获得公网 IP 地址。编辑 /etc/network/interfaces 使其包含如下一段内容：
iface eth0 inet static
       address 192.168.0.1
       netmask 255.255.255.0
       network 192.168.0.0
       broadcast 192.168.0.255
       
iface eth0:0 inet dhcp

# eth0:0 接口是一个虚拟的接口。当它被激活的时候，它的真实硬件 eth0 也会被激活。 

# end of配置debian系统的网络
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 安装DHCP
sudo apt-get install isc-dhcp-server

# 配置DHCP
# 1, 在/etc/default/isc-dhcp-server文件中，设置dhcp请求的网卡
INTERFACES="enp0s3"

# 2, 在/etc/dhcp/dhcpd.conf文件中，设置dhcp网络：
default-lease-time 600;
max-lease-time 7200;

subnet 192.168.0.0 netmask 255.255.255.0 { 
  range 192.168.0.21 192.168.0.240; 
  option subnet-mask 255.255.255.0; 
  option routers 192.168.0.1; 
  option broadcast-address 192.168.0.255; 
  filename "pxelinux.0"; 
} 

# 重启DHCP服务
sudo /etc/init.d/isc-dhcp-server start

# end of 安装DHCP
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 安装tftp服务器
sudo apt-get install tftpd-hpa xinetd  

# 1、更改tftpd-hpa服务器的根目录，修改/etc/default/tftpd-hpa，文件内容如下：
# /etc/default/tftpd-hpa  
TFTP_USERNAME="tftp"  
TFTP_DIRECTORY="/srv/tftp"  
TFTP_ADDRESS="0.0.0.0:69"  
TFTP_OPTIONS="--secure" 

# 2、在/etc/xinetd.d目录下创建一个名叫tftp的文件，并在该文件中加入如下内容：
service tftp  
{  
     socket_type     = dgram  
     protocol        = udp  
     wait            = yes  
     user            = root  
     server          = /usr/sbin/in.tftpd  
     server_args     = -s /srv/tftp    #TFTP的根目录，自己根据需要修改，这里需要注意目录权限  
     disable         = no  
     per_source      = 11  
     cps             = 1002  
     flags           = IPv4  
}  

# 3、重启tftp服务器
sudo /etc/init.d/xinetd restart  
sudo service tftpd-hpa restart  

# 4、将debian的tftp启动文件放入/tftpboot目录中
# For PXE booting, everything you should need is set up in the netboot/netboot.tar.gz tarball. Simply extract this tarball into the tftpd boot image directory.

# end of 安装tftp服务器
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 增加路由，连通内外网

# 1. 修改/etc/sysctl.conf文件，ipv4、ipv6转发设置为1
net.ipv4.ip_forward = 1
net.ipv6.ip_forward = 1

# 2. 增加一个文件在如下目录：/etc/network/if-pre-up.d/iptables，内容如下：
#!/bin/bash
/sbin/iptables -t nat -I POSTROUTING -o enp0s8 -j MASQUERADE

# end of 增加路由，连通内外网
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 安装ftp服务器
sudo apt install vsftpd

# 1. 修改/etc/vsftpd.conf文件，设置如下行：
listen=YES
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
use_localtime=YES
utf8_filesystem=YES

# 2. 增加一个.message文件在用户的home目录：内容如下就是一些欢迎信息，如下：
welcome to the ftp!

# 3. 重启ftp服务
/etc/init.d/vsftpd restart

# 4. 在客户端，使用ftp命令链接ftp server的ip地址，登陆用户必须是ftp server上的用户
ftp 192.168.1.9
help
binary
put
get

# end of 安装ftp服务器
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# --Linux下的dd命令

# 1. 制作软盘镜像文件diska.img
dd if=/dev/zero of=diska.img bs=512 count=2880

# 2. 复制boot.bin到boot.img中
dd if=boot.bin of=boot.img bs=512 count=1

# 3. 复制diska.img中从第512字节往后的内容添加到boot.img中（这是dd最出彩的部分）
dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879

# 挂载iso文件
mount -o loop ~/CentOS-6.5-x86_64-bin-DVD1.iso ~/centos/

# end of Linux下的dd命令
# ------------------------------------------------------------------------------

# 制作iso启动镜像
mkisofs -r -T -J -V "make iso " -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -v -o myiso.iso ./iso_boot

# patch对源代码打补丁
patch -p1 < patch_file -d src_dir



# ------------------------------------------------------------------------------
# --系统备份------------------

# 首先到备份目录中
cd backup_dir/

# 备份系统的命令，需要sudo执行

# 完整备份整个系统，但不包括/home等目录
sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cJvpf sys_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

# 在前面完整备份的基础上，增量备份整个系统，但不包括/home等目录
sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cJvpf sys_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

# 完整备份home目录
sudo tar -C /home -g homeinfo -cJvpf home_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

# 在前面完整备份的基础上，增量备份home目录
sudo tar -C /home -g homeinfo -cJvPf home_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

# --数据还原---------

# 首先还原系统的完整备份
sudo tar -C /mnt/sdb2 --exclude=./run --exclude=./boot/efi -g sysinfo -xJvpf sys_snapshot_20180125-235658.tar.xz

#--------------------------------------
# 建立不需要备份的系统目录，设置这些目录的权限
#!/bin/bash

# usage:
# root_fs /mnt/sdb2

create_dir() {
  for ((i=4; i<=$#; i++)); do
    eval a=\$$i
    local DIR=$1/$a
#   echo $DIR $2 $3
    mkdir -p $DIR && chown $2 $DIR && chmod $3 $DIR
  done;
}

# 恢复备份时不需要备份的目录
C_OWN=root:root
create_dir $1 $C_OWN 555 proc sys
create_dir $1 $C_OWN 755 run mnt media home var/cache var/tmp 
create_dir $1 $C_OWN 777 tmp 
create_dir $1 $C_OWN 700 boot/efi

ln -s $1/run $1/var/run

# end of 建立不需要备份的系统目录，设置这些目录的权限
#--------------------------------------


# 再还原增量备份的系统文件，-g参数可以使得在完整备份后删除的文件被删除
sudo tar -C /mnt/sdb2 -g sysinfo -xJvpf sys_diff_20180203-213638.tar.xz

# 还原home目录
sudo tar -C /mnt/sdb2/home -g homeinfo -xJvpf home_snapshot_20180125-235658.tar.xz

# 再还原增量备份的home目录
sudo tar -C /mnt/sdb2/home -g homeinfo -xJvpPf home_diff_20180203-222618.tar.xz

# !!!!!!
# 如果是在新分区还原，首先修改/etc/fstab文件中的内容，uuid要与新分区匹配。
# 再chroot到新系统，用mount -a检测/etc/fstab正确无误。执行update-grub2命令更新grub启动信息。
# 如果是在新硬盘的新分区还原，要安装grub到新硬盘。

# chroot前，必须mount必要的文件系统     
sudo mount -t proc none /mnt/sdb2/proc
sudo mount -t sysfs sys /mnt/sdb2/sys

# chroot到新的文件系统
LANG=C.UTF-8 sudo chroot /mnt/sdb2 /bin/bash

# 建立新系统的/dev
apt install makedev
cd /dev
MAKEDEV generic

# 更新/etc/fstab中的UUID
vi /etc/fstab

# 用swap的UUID更新resume文件，内容如下：
vi /etc/initramfs-tools/conf.d/resume
RESUME=UUID=907e9d49-5d28-4769-a020-089abe811e35

# 重新配置kernel
dpkg-reconfigure linux-image-`uname -r`
 
# 安装和更新grub
grub-install /dev/sdb
# update-grub2

# !!!!!!


# --批量还原备份的文件---------------------------

ls sys_diff_*.tar.xz | sort | xargs -n 1 -t tar -C /mnt/sdb2 -g sysinfo -xJvpf
ls home_diff_*.tar.xz | sort | xargs -n 1 -t tar -C /mnt/sdb2/home -g homeinfo -xJvpf


# --备份win10分区------------------------

sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin -g win10info -cJvpf win10_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin -g win10info -cJvpf win10_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

# parallel 并行压缩
sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin --exclude=./games -g win10info -cvpf - . 2>tar_err.txt | parallel --pipe --recend "" -k -j6 xz -zc > win10_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin --exclude=./games -g win10info -cvpf - . 2>tar_err.txt | parallel --pipe --recend "" -k -j4 xz -zc > win10_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# --备份macOS分区------------------------

sudo tar -C /mnt/macos -g macOSinfo -cJvpf macOS_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

sudo tar -C /mnt/macos -g macOSinfo -cJvpf macOS_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

sudo tar -C /mnt/macos -g macOSinfo -cvpf - . 2>err.txt | parallel --pipe --recend "" -k -j4 xz -zc > macOS_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C /mnt/macos -g macOSinfo -cvpf - . 2>err.txt | parallel --pipe --recend "" -k -j4 xz -zc > macOS_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# --hfs分区的操作------------------------

# 无法挂载或者只读挂载,需要装hfsprogs来支持hfs, 用fdisk -l 命令查看磁盘
sudo apt-get install hfsprogs
sudo fsck.hfsplus -f /dev/sdb2

# 挂载hfs+分区
sudo mkdir /mnt/mac
sudo mount -t hfsplus -o force,rw /dev/sda2 /mnt/mac/
sudo mount -t hfsplus -o force,ro /dev/nvme0n1p2 /mnt/macos

# 挂载efi分区
sudo mount -o ro /dev/nvme0n1p1 /mnt/efi

# --parallel----------------------

# 第一种模式是利用 parallel传参数。管道前面进来的作为参数传给后面的命令，并行执行
# 其中{}是占位符，用来占位传入参数的位置。
seq 5 | parallel echo pre_placehoder_{}
pre_placehoder_1
pre_placehoder_2
pre_placehoder_3
pre_placehoder_4
pre_placehoder_5

# 另一种模式就是 parallel --pipe
# 这时管道前面的不是作为参数，而是标准输入传给后面的命令
cat my_large_log | parallel --pipe grep pattern 

sudo tar -C / -g sysinfo -cvpf - ./usr | parallel --pipe --recend "" -j4 -k -j4 xz -zc > usr.tar.xz

# 备份整个文件系统
sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > sys_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > sys_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# 备份/home目录
sudo tar -C /home -g homeinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > home_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C /home -g homeinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > home_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# end of 系统备份
# ------------------------------------------------------------------------------

# 价格man bash输出为pdf文件
man -t bash|ps2pdf - bash.pdf

# --输出重定向--------------------

# 将显示的结果输出到 list.txt 文件中，若该文件以存在则予以取代！
ls -al > list.txt

# 将显示的结果累加到 list.txt 文件中，该文件为累加的，旧数据保留！
ls -al >> list.txt

# 将显示的数据，正确的输出到 list.txt 错误的数据输出到 list.err
ls -al  1> list.txt   2> list.err

# 将显示的数据，不论正确或错误均输出到 list.txt 当中！错误与正确文件输出到同一个文件中，则必须以上面的方法来写！不能写成其它格式！
ls -al 1> list.txt 2> &1

# 将显示的数据，正确的输出到 list.txt 错误的数据则予以丢弃！ /dev/null ，可以说成是黑洞装置。为空，即不保存。
ls -al 1> list.txt 2> /dev/null


# --进程查看--------------------

# 显示同一终端下的所有程序
ps –a

# 显示有效用户的相关进程 
ps –u

# 列出较完整的信息 
ps –x

# 查询系统所有进程数据 
ps aux

# 查看不与terminal有关的进程 
ps ax

# 查看同一部分进程树状态 
ps axjf

# ps可以与grep组合一起查询，表示查看所有进程里是 java 的进程信息等等
ps -ef | grep java


# --测试磁盘读写速度--------------------

# cd到u盘目录,测试写入速度
$ dd if=/dev/zero of=./largefile bs=8k count=10
10+0 records in
10+0 records out
81920 bytes (82 MB) copied, 11.0626 s, 7.4 MB/s

# 测试读取速度 (清除缓存)
$ sudo sh -c "sync && echo 3 > /proc/sys/vm/drop_caches"     
$ dd if=./largefile of=/dev/null bs=8k
8+0 records in
8+0 records out
65536 bytes (66 MB) copied, 2.90366 s, 22.6 MB/s


# --使用deb包--------------------

# 查看deb包含有哪些文件(不安装)
dpkg -c xxx.deb // 安装前根据deb文件查看
dpkg -L debname // 安装后根据包名查看

# 安装deb包
dpkg -i xxx.deb


# 移除deb包
dpkg -r debname

# 查看某个文件属于哪个deb包
dpkg -S filepath

# 释放安装内容到dirname目录中
dpkg -X xxx.deb dirname

# 释放控制信息到当前目录下的DEBIAN子目录中
dpkg -e xxx.deb

# 清除所有已删除包的残馀配置文件
dpkg -l | grep ^rc| awk '{print $2}' | sudo xargs dpkg -P

# 列出不包括当前内核版本的其它所有内核版本：
# 输出的内容中可能会包括内核映像的如下三种状态：
#    rc：表示已经被移除
#    ii：表示符合移除条件（可移除）
#    iU：已进入 apt 安装队列，但还未被安装（不可移除）
dpkg -l | tail -n +6| grep -E 'linux-image-[0-9]+'| grep -Fv $(uname -r)

# 移除状态为 ii 的旧版「linux-image-4.4.0-21-generic」内核，可以使用如下命令：
sudo dpkg --purge linux-image-4.4.0-21-generic


# --增加私有仓库--------------------

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE
sudo add-apt-repository 'deb http://typora.io linux/'
sudo apt-get update
sudo apt-get install typora


# --so文件目录设置--------------------

如果共享库文件安装到了/usr/local/lib(很多开源的共享库都会安装到该目录下)或其它"非/lib或/usr/lib"目录下, 那么在执行ldconfig命令前, 还要把新共享库目录加入到共享库配置文件/etc/ld.so.conf中, 如下:

# cat /etc/ld.so.conf
include ld.so.conf.d/*.conf
# echo "/usr/local/lib" >> /etc/ld.so.conf
# ldconfig


# 在非KDE桌面环境下，如果安装了fcitx-module-kimpanel，可能会导致Fcitx输入中文时不显示候选词框，移除该组件，然后重启Fcixt。
$ sudo apt remove fcitx-module-kimpanel

# --wget命令参考-----------------------

# 下载website的整个内容，保存在~/tmp/目录中
wget -r -p -np -k -P ~/tmp/ http://www.qtiplot.com/doc/manual-en

# 批量增加文件的扩展名
find . -type f | xargs -I {} mv {} {}.mp3

