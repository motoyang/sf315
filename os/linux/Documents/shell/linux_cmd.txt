
# 安装新的debian系统
# fdisk查看和分区

swapon /dev/sda5
mount /dev/sda1 /mnt/debinst
tar -xf debootstrap_0.X.X_all.tar.gz
/usr/sbin/debootstrap --arch amd64 stretch /mnt/debinst http://ftp2.cn.debian.org/debian
     
mount -t proc none /mnt/debinst/proc
mount -o bind /dev /mnt/debinst/dev
mount -t sysfs sys /mnt/debinst/sys
chroot /mnt/debinst/ /bin/bash

apt install linux-headers-`uname -r`
apt install linux-image-`uname -r` net-tools

apt install grub-pc
# apt install grub-efi
grub-install /dev/sda
update-grub

useradd xt -m
passwd xt

apt install sudo
vi /etc/sudoers

sync & reboot


# 安装DHCP
sudo apt-get install isc-dhcp-server

# 配置DHCP
# 1, 在/etc/default/dhcp-server文件中，设置dhcp请求的网卡
INTERFACES="enp0s3"

# 2, 在/etc/dhcp/dhcpd.conf文件中，设置dhcp网络：
default-lease-time 600;
max-lease-time 7200;

subnet 192.168.1.0 netmask 255.255.255.0 {
  range 192.168.1.21 192.168.1.240;
  option subnet-mask 255.255.255.0;
  option routers 192.168.1.20;
  option broadcast-address 192.168.1.255;
  filename "pxelinux.0";
}

# 重启DHCP服务
sudo /etc/init.d/isc-dhcp-server start


# 安装tftp服务器
sudo apt-get install tftpd-hpa xinetd  

# 1、更改tftpd-hpa服务器的根目录，修改/etc/default/tftpd-hpa，文件内容如下：
# /etc/default/tftpd-hpa  
TFTP_USERNAME="tftp"  
TFTP_DIRECTORY="/data/tftpboot"    #更改这里，在这里指定根目录，我这里指定为/data/tftpboot目录  
TFTP_ADDRESS="0.0.0.0:69"  
TFTP_OPTIONS="--secure" 

# 2、在/etc/xinetd.d目录下创建一个名叫tftp的文件，并在该文件中加入如下内容：
service tftp  
{  
     socket_type     = dgram  
     protocol        = udp  
     wait            = yes  
     user            = root  
     server          = /usr/sbin/in.tftpd  
     server_args     = -s /tftpboot    #TFTP的根目录，自己根据需要修改，这里需要注意目录权限  
     disable         = no  
     per_source      = 11  
     cps             = 1002  
     flags           = IPv4  
}  

# 3、重启tftp服务器
sudo /etc/init.d/xinetd restart  
sudo service tftpd-hpa restart  

# 4、将debian的tftp启动文件放入/tftpboot目录中
# For PXE booting, everything you should need is set up in the netboot/netboot.tar.gz tarball. Simply extract this tarball into the tftpd boot image directory.


# 增加路由，连通内外网
# 1. 修改/etc/sysctl.conf文件，ipv4、ipv6转发设置为1
net.ipv4.ip_forward = 1
net.ipv6.ip_forward = 1

# 2. 增加一个文件在如下目录：/etc/network/if-pre-up.d/iptables，内容如下：
#!/bin/bash
/sbin/iptables -t nat -I POSTROUTING -o enp0s8 -j MASQUERADE


# --Linux下的dd命令

# 1. 制作软盘镜像文件diska.img
dd if=/dev/zero of=diska.img bs=512 count=2880

# 2. 复制boot.bin到boot.img中
dd if=boot.bin of=boot.img bs=512 count=1

# 3. 复制diska.img中从第512字节往后的内容添加到boot.img中（这是dd最出彩的部分）
dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879

# 挂载iso文件
mount -o loop ~/CentOS-6.5-x86_64-bin-DVD1.iso ~/centos/

# 制作iso启动镜像
mkisofs -r -T -J -V "make iso " -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -v -o myiso.iso ./iso_boot

# patch对源代码打补丁
patch -p1 < patch_file -d src_dir


# --系统备份------------------

# 首先到备份目录中
cd backup_dir/

# 备份系统的命令，需要sudo执行

# 完整备份整个系统，但不包括/home等目录
sudo tar -g sysinfo -cJvPf sys_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz / --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/run --exclude=/boot/efi --exclude=/tmp --exclude=/media --exclude=/home

# 在前面完整备份的基础上，增量备份整个系统，但不包括/home等目录
sudo tar -g sysinfo -cJvPf sys_diff_`date +%Y%m%d-%H%M%S`.tar.xz / --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/run --exclude=/boot/efi --exclude=/tmp --exclude=/media --exclude=/home

# 完整备份home目录
sudo tar -g homeinfo -cJvPf home_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz /home

# 在前面完整备份的基础上，增量备份home目录
sudo tar -g homeinfo -cJvPf home_diff_`date +%Y%m%d-%H%M%S`.tar.xz /home

# --数据还原---------

# 首先还原系统的完整备份
sudo tar -g sysinfo --exclude=/run --exclude=/boot/efi -xJvpPf sys_snapshot_20180125-235658.tar.xz -C /

# 建立不需要备份的系统目录
# 还要设置这些目录的权限

sudo su
mkdir /proc && chownd root:root /proc && chmod 555 /proc
mkdir /lost+found && chownd root:root /proc && chmod 700 /lost+found
mkdir /mnt && chownd root:root /proc && chmod 755 /mnt
mkdir /sys && chownd root:root /proc && chmod 555 /sys
mkdir /tmp && chownd root:root /proc && chmod 777 /tmp
mkdir /media && chownd root:root /proc && chmod 755 /mnt
mkdir /home && chownd root:root /proc && chmod 755 /home
mkdir /boot/efi && chownd root:root /boot/efi && chmod 700 /boot/efi
exit

# 再还原增量备份的系统文件，-g参数可以使得在完整备份后删除的文件被删除
sudo tar -g sysinfo -xJvpPf sys_diff_20180203-213638.tar.xz -C /

# 还原home目录
sudo tar -g homeinfo -xJvpPf home_snapshot_20180125-235658.tar.xz -C /home/xt

# 再还原增量备份的home目录
sudo tar -g homeinfo -xJvpPf home_diff_20180203-222618.tar.xz -C /home/xt


# --批量还原备份的文件---------------------------

ls sys_diff_*.tar.xz | sort | xargs -n 1 -t tar -g sysinfo -xJvpPf -C /
ls home_diff_*.tar.xz | sort | xargs -n 1 -t tar -g homeinfo -xJvpPf -C /home


# --备份win10分区------------------------

sudo tar -g win10info -cJvPf win10_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz /media/xt/Win10 --exclude /media/xt/Win10/hiberfil.sys

sudo tar -g win10info -cJvPf win10_diff_`date +%Y%m%d-%H%M%S`.tar.xz /media/xt/Win10

# parallel 并行压缩
sudo tar -g win10info -cvpPf - /media/xt/Win10 --exclude=/media/xt/Win10/*.sys --exclude=/media/xt/Win10/games/World_of_warships 2>tar_err.txt | parallel --pipe --recend "" -k -j6 xz -zc > win10_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -g win10info -cvpPf - /media/xt/Win10 --exclude=/media/xt/Win10/*.sys --exclude=/media/xt/Win10/games/World_of_warships 2>tar_err.txt | parallel --pipe --recend "" -k -j4 xz -zc > win10_diff_`date +%Y%m%d-%H%M%S`.tar.xz


# --备份macOS分区------------------------

sudo tar -g macOSinfo -cJvPf macOS_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz /mnt/macos

sudo tar -g macOSinfo -cJvPf macOS_diff_`date +%Y%m%d-%H%M%S`.tar.xz /mnt/macos

sudo tar -g macOSinfo -cvpPf - /mnt/macos 2>err.txt | parallel --pipe --recend "" -k -j4 xz -zc > macOS_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

# --hfs分区的操作------------------------

# 无法挂载或者只读挂载,需要装hfsprogs来支持hfs, 用fdisk -l 命令查看磁盘
sudo apt-get install hfsprogs
sudo fsck.hfsplus -f /dev/sda2

# 挂载hfs+分区
sudo mkdir /media/mac
sudo mount -t hfsplus -o force,rw /dev/sda2 /media/mac/
sudo mount -t hfsplus -o force,ro /dev/nvme0n1p2 /mnt/macos

# 挂载efi分区
sudo mount -o ro /dev/nvme0n1p1 /mnt/efi

# --parallel----------------------

# 第一种模式是利用 parallel传参数。管道前面进来的作为参数传给后面的命令，并行执行
# 其中{}是占位符，用来占位传入参数的位置。
seq 5 | parallel echo pre_placehoder_{}
pre_placehoder_1
pre_placehoder_2
pre_placehoder_3
pre_placehoder_4
pre_placehoder_5

# 另一种模式就是 parallel --pipe
# 这时管道前面的不是作为参数，而是标准输入传给后面的命令
cat my_large_log | parallel --pipe grep pattern 

sudo tar -g sysinfo -cvpPf - /usr | parallel --pipe --recend "" -j4 -k -j4 xz -zc > usr.tar.xz

sudo tar -g sysinfo -cvpPf - / --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/run --exclude=/boot/efi --exclude=/tmp --exclude=/media --exclude=/home 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > sys_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -g sysinfo -cvpPf - / --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/run --exclude=/boot/efi --exclude=/tmp --exclude=/media --exclude=/home 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > sys_diff_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -g homeinfo -cvpPf - /home 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > home_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -g homeinfo -cvpPf - /home 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > home_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# --输出重定向--------------------

# 将显示的结果输出到 list.txt 文件中，若该文件以存在则予以取代！
ls -al > list.txt

# 将显示的结果累加到 list.txt 文件中，该文件为累加的，旧数据保留！
ls -al >> list.txt

# 将显示的数据，正确的输出到 list.txt 错误的数据输出到 list.err
ls -al  1> list.txt   2> list.err

# 将显示的数据，不论正确或错误均输出到 list.txt 当中！错误与正确文件输出到同一个文件中，则必须以上面的方法来写！不能写成其它格式！
ls -al 1> list.txt 2> &1

# 将显示的数据，正确的输出到 list.txt 错误的数据则予以丢弃！ /dev/null ，可以说成是黑洞装置。为空，即不保存。
ls -al 1> list.txt 2> /dev/null


# --进程查看--------------------

# 显示同一终端下的所有程序
ps –a

# 显示有效用户的相关进程 
ps –u

# 列出较完整的信息 
ps –x

# 查询系统所有进程数据 
ps aux

# 查看不与terminal有关的进程 
ps ax

# 查看同一部分进程树状态 
ps axjf

# ps可以与grep组合一起查询，表示查看所有进程里是 java 的进程信息等等
ps -ef | grep java


# --测试磁盘读写速度--------------------

# cd到u盘目录,测试写入速度
$ dd if=/dev/zero of=./largefile bs=8k count=10
10+0 records in
10+0 records out
81920 bytes (82 MB) copied, 11.0626 s, 7.4 MB/s

# 测试读取速度 (清除缓存)
$ sudo sh -c "sync && echo 3 > /proc/sys/vm/drop_caches"     
$ dd if=./largefile of=/dev/null bs=8k
8+0 records in
8+0 records out
65536 bytes (66 MB) copied, 2.90366 s, 22.6 MB/s


# --使用deb包--------------------

# 查看deb包含有哪些文件(不安装)
dpkg -c xxx.deb // 安装前根据deb文件查看
dpkg -L debname // 安装后根据包名查看

# 安装deb包
dpkg -i xxx.deb


# 移除deb包
dpkg -r debname

# 查看某个文件属于哪个deb包
dpkg -S filepath

# 释放安装内容到dirname目录中
dpkg -X xxx.deb dirname

# 释放控制信息到当前目录下的DEBIAN子目录中
dpkg -e xxx.deb

# 清除所有已删除包的残馀配置文件
dpkg -l | grep ^rc| awk '{print $2}' | sudo xargs dpkg -P

# 列出不包括当前内核版本的其它所有内核版本：
# 输出的内容中可能会包括内核映像的如下三种状态：
#    rc：表示已经被移除
#    ii：表示符合移除条件（可移除）
#    iU：已进入 apt 安装队列，但还未被安装（不可移除）
dpkg -l | tail -n +6| grep -E 'linux-image-[0-9]+'| grep -Fv $(uname -r)

# 移除状态为 ii 的旧版「linux-image-4.4.0-21-generic」内核，可以使用如下命令：
sudo dpkg --purge linux-image-4.4.0-21-generic


# --增加私有仓库--------------------

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE
sudo add-apt-repository 'deb http://typora.io linux/'
sudo apt-get update
sudo apt-get install typora


# --so文件目录设置--------------------

如果共享库文件安装到了/usr/local/lib(很多开源的共享库都会安装到该目录下)或其它"非/lib或/usr/lib"目录下, 那么在执行ldconfig命令前, 还要把新共享库目录加入到共享库配置文件/etc/ld.so.conf中, 如下:

# cat /etc/ld.so.conf
include ld.so.conf.d/*.conf
# echo "/usr/local/lib" >> /etc/ld.so.conf
# ldconfig


# 在非KDE桌面环境下，如果安装了fcitx-module-kimpanel，可能会导致Fcitx输入中文时不显示候选词框，移除该组件，然后重启Fcixt。
$ sudo apt remove fcitx-module-kimpanel

