	你的公网 IPv4 地址是 120.229.94.41

	你的公网 IPv6 地址是 2409:8a55:3344:8e10:484f:b774:ac35:4646

	你的运营商（ISP）是 CMNET-GUANGDONG-AP China Mobile communications corporation

	在你所处的地区，本站的测试结果并不可靠。

	你已经有 IPv6 地址了，但你的浏览器不太愿意用，这一点比较令人担心。 [更多信息]

	你的浏览器屏蔽了测试 URL，我们将尝试备用方案，因此可能无法显示你的 IP 地址，并且难以给出恰当的建议。 [更多信息]

	这最有可能是 NoScript 或 AdBlock+ 造成的。可以设置 NoScript 允许此页面执行所有脚本（可能需要重复几次），至少允许下列 URL。 [更多信息]

	你的浏览器屏蔽了 http://ipv6.vm0.test-ipv6.com/ip/?callback=?&testdomain=test-ipv6.com&testname=test_aaaa

	你的 DNS 服务器（可能由运营商提供）已经接入 IPv6 互联网了。

	糟糕！IPv6 基本正常，但较大的数据包传输失败，这可能导致部分网站显示不全。询问你的运营商是不是 MTU 的问题，这可能与你的隧道有关。 检查你的防火墙，确保已放行 ICMPv6 消息（尤其是第 2 类，“数据包过大”）。 [更多信息]
	
# --------------------------------------------
# 型号：F663N，亲测广东可用
usr:CMCCAdmin
pwd:aDm8H%MdA

普通登陆：
user
dc3ss

# --------------------------------------------
# 创建一个swap文件：

# bs 为块大小,count为块的数量即分配1K*2M=2G swap
sudo dd if=/dev/zero of=/swapfile  bs=1K count=2M

# 将生成的swapfile文件转换成Swap文件
sudo mkswap /swapfile

# 锁定文件的root权限：
sudo chmod 600 /swapfile

# 激活swap文件
sudo swapon /swapfile 

# 如果需要卸载这个swap文件则：
sudo swapoff swapfile
# 如果需要一直保持这个swap大小，则把它追加写入/etc/fstab文件：
/swapfile none swap sw 0 0

#查看当前使用的swap文件名称、目录、大小、使用情况、优先级。
sudo swapon -s 

# --------------------------------------------
# 使用openssl加密和解密，如果不输入密码，就在回车后输入
openssl enc -aes-256-cbc -e -in backup20180115.tar.sgz -out vps_config.tar.gz.aes
openssl enc -aes-256-cbc -d -in vps_config.tar.gz.aes -out vps_config.tar.gz
openssl enc -des3 -d -k 密码 -in AppleKey.tar.bz2.des3 -out AppleKey.tar.bz2

openssl enc -des3 -d -in AppleKey.tar.bz2.des3 -out AppleKey.tar.bz2

# 把tar、bzip2、openssl结合在一起，对文件进行压缩加密。如果没有-k参数，就在回车后输入密码
tar -cjf - Apple_ID.png | openssl enc -des3 -e -k 密码 -out AppleKey.tar.bz2.des3
openssl enc -des3 -d -k 密码 -in AppleKey.tar.bz2.des3 | tar -xjf -

# 把tar、bzip2、openssl结合在一起，使用aes-256-cbc算法对文件进行压缩加密。如果不输入密码，就在回车后输入
tar -cjf - Apple_ID.png | openssl enc -aes-256-cbc -e -k 密码 -out AppleKey.tar.bz2.aes256
openssl enc -aes-256-cbc -d -k 密码 -in AppleKey.tar.bz2.aes256 | tar -xjf -

openssl enc -aes-256-cbc -d -in zs.tar.bz2.a | tar -xjf -
openssl enc -aes-256-cbc -d -in b.tar.bz2.a | tar -xjf -
openssl enc -aes-256-cbc -d -in a20170818.tar.bz2.a | tar -xjf -

tar -cjf - m20170818.txt | openssl enc -des3 -e -out a20170818.tar.bz2.des3
tar -cjf - m20170818.txt | openssl enc -aes-256-cbc -e -out a20170818.tar.bz2.a
tar -cjf - *.jpeg | openssl enc -aes-256-cbc -e  -out file.tar.bz2.a
openssl enc -aes-256-cbc -d -in file.tar.bz2.a | tar -xjf -
openssl enc -aes-256-cbc -d -in a.tar.bz2.a | tar -xjf -

// -----------------------------------------------
hg255d: 电源口径：5.5, 3.5，12V1.5A
murcery mw300r：电源规格9v0.6a，5.5*2.1接口，兼容5.5*2.5接口

# -----------------------------------
# openwrt完整备份

1.查看 firmware 分区所对应的 mtd 设备
cat /proc/mtd

dev: size erasesize name
mtd0: 00040000 00020000 "u-boot"
mtd1: 00040000 00020000 "u-boot-env"
mtd2: 00040000 00020000 "caldata"
mtd3: 00080000 00020000 "pot"
mtd4: 00200000 00020000 "language"
mtd5: 00080000 00020000 "config"
mtd6: 00300000 00020000 "traffic_meter"
mtd7: 00200000 00020000 "kernel"
mtd8: 07700000 00020000 "ubi"
mtd9: 07900000 00020000 "firmware"
mtd10: 00040000 00020000 "caldata_backup"

这里就是mtd9
2.得到固件备份文件 firmware_backup.bin，在 /tmp 目录下
dd if=/dev/mtd9 of=/tmp/firmware_backup.bin

3.恢复该固件：
将 firmware_backup.bin 上传至 /tmp，使用命令
mtd -r write /tmp/firmware_backup.bin firmware

即可恢复，恢复完成路由器会自行重启

不过，如果在没有重刷固件的情况下，我建议仅对 /overlay 进行打包并备份：
tar -czvf /tmp/overlay_backup.tar.gz /overlay

然后下次直接将 overlay_backup.tar.gz 上传至 /tmp ，然后清空 /overlay 并恢复备份：
rm -rvf /overlay/*
cd / && tar -xzvf /tmp/overlay_backup.tar.gz


#--------------------------------------
# openwrt（明月20180218版本），shadowsocks配置

# fireware配置如下
vi /etc/config/fireware

# 内容如下：
config defaults
	option syn_flood '1'
	option input 'ACCEPT'
	option output 'ACCEPT'
	option forward 'REJECT'

config zone
	option name 'lan'
	option input 'ACCEPT'
	option output 'ACCEPT'
	option forward 'ACCEPT'
	option network 'lan'

config zone
	option name 'wan'
	option network 'wan6'
	option input 'REJECT'
	option output 'ACCEPT'
	option forward 'REJECT'
	option masq '1'
	option mtu_fix '1'

config forwarding
	option dest 'wan'
	option src 'lan'

config forwarding
	option dest 'lan'
	option src 'wan'


# 首先安装Shadowsocks-client，可以在luci界面安装。

# 在/etc/config/sslocal中做配置
vi /etc/config/sslocal 

# 内容如下
config sslocal
       option server_addr '65.49.221.234'
       option server_port '57'
       option local_addr '192.168.10.1'
       option local_port '3080'
       option password 'hjyhj.ltb,0yue'
       option method 'rc4'

# 启动shadowsocks
/etc/init.d/sslocal start


#----------------------------------------------
# chinaDNS配置
# 首先确保shadowsocks配置页面的UDP转发关闭；并且确保你可以正常使用国外公共DNS服务。

vi /etc/config/chinadns

# 内容如下：
config chinadns
	option enable '0'
	option bidirectional '0'
	option chnroute '/etc/chinadns_chnroute.txt'
	option port '5353'
	option server '114.114.114.114,208.67.222.222:443,8.8.8.8'
	option automod '1'
	option boot_time '10'
	option refreshtime '30'
	option autorefresh '0'

# 在Luci中切换至“网络”-“DHCP/DNS”设置
在”DNS转发”中填入127.0.0.1#5353

# 其中，5353是ChinaDNS的端口，如果你在之前设置界面里端口号不是5353，这里记得和前面保持一致。
然后切到HOSTS和解析文件选项卡，勾中“忽略解析文件”

# ---------------------------------------------
# 在上面的准备工作都完成之后，就可以正式开始配置了。首先准备一份刚装好的干净的 OpenWRT 路由器（用过了也没关系，一般情况下不会有冲突），把 6 个软件包复制到 pscp 的目录下，打开命令行，输入以下命令：

pscp -scp kmod-ipt-nat-extra_3.3.8-1_ar71xx.ipk root@192.168.1.1:/tmp
pscp -scp iptables-mod-nat-extra_1.4.10-4_ar71xx.ipk root@192.168.1.1:/tmp
pscp -scp zlib_1.2.7-1_ar71xx.ipk root@192.168.1.1:/tmp
pscp -scp libopenssl_1.0.1h-1_ar71xx.ipk root@192.168.1.1:/tmp
pscp -scp shadowsocks-libev_1.6.1-1_ar71xx.ipk root@192.168.1.1:/tmp
pscp -scp ChinaDNS-C_1.1.8-1_ar71xx.ipk root@192.168.1.1:/tmp

# 完成之后，软件包就都上传到路由器的 /tmp 目录下了。然后使用 putty 打开路由器地址 192.168.1.1，运行以下命令：
	
cd /tmp
opkg install kmod-ipt-nat-extra_3.3.8-1_ar71xx.ipk
opkg install iptables-mod-nat-extra_1.4.10-4_ar71xx.ipk
opkg install zlib_1.2.7-1_ar71xx.ipk
opkg install libopenssl_1.0.1h-1_ar71xx.ipk
opkg install shadowsocks-libev_1.6.1-1_ar71xx.ipk
opkg install ChinaDNS-C_1.1.8-1_ar71xx.ipk

# 建议严格按照顺序执行上面的命令，以避免软件包依赖问题。然后执行下面的命令编辑防火墙规则（也可以在 LuCI Web 界面的 Network – Firewall – Custom Rules 下设置）：

vi /etc/firewall.user

# 正常情况下，里面应该只有 3 行以 # 开头的注释。在注释下面加入以下内容
iptables -t nat -N SHADOWSOCKS
iptables -t nat -F SHADOWSOCKS
 
# server
iptables -t nat -A SHADOWSOCKS -d x.x.x.x -j RETURN
 
# reserved networks
iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
 
# google
iptables -t nat -A SHADOWSOCKS -p tcp -d 74.125.0.0/16 -j REDIRECT --to-ports 8001
iptables -t nat -A SHADOWSOCKS -p tcp -d 173.194.0.0/16 -j REDIRECT --to-ports 8001
 
# apply the rules
iptables -t nat -I PREROUTING -j SHADOWSOCKS
 
# start china-dns
chinadns -p 5353 -s y.y.y.y,8.8.4.4 -l /etc/chinadns_iplist.txt  -c /etc/chinadns_chnroute.txt &
 
# start shadowsocks-local
ss-local -s server -p port -k password -m aes-256-cfb -l 8000 -u &
 
# start shadowsocks-redir
ss-redir -s server -p port -k password -m aes-256-cfb -l 8001 -u &

这个脚本里有几个需要修改的地方：

    第 5 行的 x.x.x.x 需要修改为 shadowsocks 服务器的 IP 地址
    第 21 行的 y.y.y.y 需要修改为原来的（国内的） DNS 服务器的 IP 地址
    第 24 和 27 行的 server 需要修改为 shadowsocks 服务器的域名（IP 地址也行），port 需要修改为服务器端口号，password 修改为你的密码，加密方式这里填的是 AES-256-CFB，但是你的服务可能用的并不是这个加密方式，所以需要根据需要进行修改。

这个脚本完成之后，编辑 dnsmasq 的配置文件：
vi /etc/dnsmasq.conf

在文件的最后加入下面两行（注意这里用的是 # 而不是冒号）：
no-resolv
server=127.0.0.1#5353

最后，保存文件，然后重启路由器：
reboot

这样路由器的配置就完成了，但是 Windows 可能还在使用老的 DNS 数据库。运行下面的命令刷新 DNS 缓存：
ipconfig /flushdns

如果没有什么差错的话，接下来就能够访问 Google 搜索、Google Code 和 Gmail 了，手机连上 WIFI 后能够直接访问 Google Play！

# ----------------------------------
# 开启bbr，增加tcp性能

1、修改系统变量

echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf

2、保存生效

sysctl -p

3、查看内核是否已开启BBR

sysctl net.ipv4.tcp_available_congestion_control

显示以下即已开启：

# sysctl net.ipv4.tcp_available_congestion_control
net.ipv4.tcp_available_congestion_control = bbr cubic reno

4、查看BBR是否启动

lsmod | grep bbr

显示以下即启动成功：

# lsmod | grep bbr
tcp_bbr                20480  14


# -----------------------------------
# 服务器端一键安装shadowsocks-libev，也可以用apt安装

wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh

chmod +x shadowsocks-libev-debian.sh

./shadowsocks-libev-debian.sh 2>&1 | tee shadowsocks-libev-debian.log

# 配置
sudo vi /etc/shadowsocks-libev/config.json

# 输入如下内容：
{
    "server":"0.0.0.0",
    "server_port":57,
    "local_port":1080,
    "password":"hjyhj.ltb,0yue",
    "timeout":60,
    "method":"aes-256-cfb"
}

# 修改shadowsocks-libev.service
sudo vi /lib/systemd/system/shadowsocks-libev.service

# 如下内容，这样就可以使用1000以下的系统端口号
[Unit]
Description=Shadowsocks-libev Default Server Service
Documentation=man:shadowsocks-libev(8)
After=network.target

[Service]
Type=simple
EnvironmentFile=/etc/default/shadowsocks-libev
User=root
Group=root
LimitNOFILE=32768
ExecStart=/usr/bin/ss-server -c $CONFFILE $DAEMON_ARGS

[Install]
WantedBy=multi-user.target

# 使用如下命令更新systemd配置
sudo systemctl daemon-reload 

# 使用systemd启动、停止、查看状态，
sudo systemctl start shadowsocks-libev.service
sudo systemctl stop shadowsocks-libev.service
sudo systemctl status shadowsocks-libev.service

# ---------------------------------------------
# 客户端shadowsocks-libev安装
sudo apt install shadowsocks-libev

# 配置：
sudo vi /etc/shadowsocks-libev/config.json
# 输入如下内容：
{ 
	"server":"65.49.221.234",
	"server_port":57, 
	"local_address":"127.0.0.1", 
	"local_port":1080, 
	"password":"hjyhj.ltb,0yue", 
	"timeout":300, 
	"method":"aes-256-cfb", 
	"fast_open":false
}

# 更改systemd的服务配置
sudo vi /lib/systemd/systems/shadowsocks-libev

# 内容如下：
[Unit]
Description=Shadowsocks-libev Default Server Service
Documentation=man:shadowsocks-libev(8)
After=network.target

[Service]
Type=simple
EnvironmentFile=/etc/default/shadowsocks-libev
User=nobody
Group=nogroup
LimitNOFILE=32768
ExecStart=/usr/bin/ss-local -c $CONFFILE $DAEMON_ARGS

[Install]
WantedBy=multi-user.target

# 使用如下命令更新systemd配置
sudo systemctl daemon-reload 

# 使用systemd启动、停止、查看状态，
sudo systemctl start shadowsocks-libev.service
sudo systemctl stop shadowsocks-libev.service
sudo systemctl status shadowsocks-libev.service

# -----------------------------------
# 安装shadowsocks
wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh

chmod +x shadowsocks.sh 

./shadowsocks.sh 2>&1 | tee shadowsocks.log

# 配置服务器上的shadowsocks
vi /etc/shadowsocks.json

# 输入如下内容
{
    "server":"0.0.0.0",
    "server_port":18888,
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"c2kc2kc2k",
    "timeout":300,
    "method":"aes-256-cfb",
    "fast_open":false
}

# 启动shadowsocks服务
/etc/init.d/shadowsocks restart


# 客户端安装
apt install python-pip
pip install shadowsocks

# 客户端配置
{ 
	"server":"65.49.221.234",
	"server_port":18888, 
	"local_address":"127.0.0.1", 
	"local_port":1080, 
	"password":"c2kc2kc2k", 
	"timeout":300, 
	"method":"rc4-md5", 
	"fast_open":false
}

# 客户端配置开机自启
# 以下使用Systemd来实现shadowsocks开机自启。
sudo vim /etc/systemd/system/shadowsocks.service

# 在里面填写如下内容：
[Unit]
Description=Shadowsocks Client Service
After=network.target

[Service]
Type=simple
User=xt
ExecStart=/home/xt/.local/bin/sslocal -c /etc/shadowsocks.json

[Install]
WantedBy=multi-user.target

# 配置生效：
sudo systemctl enable /etc/systemd/system/shadowsocks.service

# firefox配置使用shadowsocks
# 在firefox中Add-ones->Extensions中搜索安装插件Foxyproxy。注意：在终端命令启用ss客户端后插件才能生效
# 打开Foxyproxy的options，点击ADD，Proxy Type选择SOCKS5，IP Address填127.0.0.1，Port填1080，点击save保存
# 点击浏览器菜单栏中Foxyproxy插件图标，选择相应的代理模式

# -----------------------------------
本文适用于解决openssl升级到1.1.0以上版本，导致shadowsocks2.8.2启动报undefined symbol: EVP_CIPHER_CTX_cleanup错误。

 修改方法：

    用vim打开文件：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)
    跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup）
    进入编辑模式
    将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,) 
    改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)
    再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx) 
    改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)
    保存并退出
    启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录
    问题解决

# ----------------------------------
# diff 和 patch

# 补丁实际上就是diff的输出结果，我们可以直接将输出结果保存成文件，也可以使用管道符号做这件事，如下：
diff original.txt updated.txt > mypatch.patch
# 这时我们就有了一个补丁文件，可以将original文件更新了updated文件了。参数-b所以还有生成一个.org后缀的文件它是打补丁前的源文件
patch original.txt -i my patch.patch -o updated-1.txt

# -c是上下文模式，会在mypatch2.patch文件中保留源和目标文件名，在patch命令中就不需要输入文件名了。
diff -c original.txt updated.txt > mypath2.path
# 应用补丁，这里如果不指定输出文件的话，源文件就会被更新（这本来就是补丁文件的作用）。
patch -i mypatch2.patch -o updated.txt

# 对多个文件应用补丁，首先生成一个补丁文件，我们还是用上下文的格式，-r是比较子目录中的内容。
diff -c original update > directory.patch
# 在一个新的目录下拷贝 original 文件夹和补丁文件，执行 patch -i directory.patch，此时会提示找不到文件，因为patch会在当前文件夹查找文件（默认情况下patch会将文件名前的所有文件夹去掉）因为此时补丁文件在文件夹外面，所以我们应当告诉patch不要这么做，使用-p参数。
patch -p0 -i directory.patch

# 有时候版本需要进行回撤，这时可以使用 -R 参数。
patch -p0 -R -i directory.patch

# 常使用的 patch 参数：
-p 指定目录级别（从路径全称中除去几层目录），如果补丁文件包含路径名称 /curds/whey/src/blurfl/blurfl.c，那么：
-p0 使用完整路径名
-p1 除去前导斜杠，留下 curds/whey/src/blurfl/blurfl.c
-p4 除去前导斜杠和前三个目录，留下 blurfl/blurfl.c
-d Directory，打补丁前，更改当前目录到指定目录
-i PatchFile，从指定文件，而不是从标准输入中读取补丁信息
-R 逆向补丁，这个选项在防止打错补丁很有用处

--------------------------------------------------------------------------------

sudo apt install bumblebee-nvidia bumblebee primus

--------------------------------------------------------------------------------

# grub引导时加入内核参数 pci=nomsi

# 1、打开终端，修改/etc/default/grub引导文件
sudo -H gedit /etc/default/grub

# 2、打开之后找到以下这句
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"

# 然后将其改为：
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash pci=nomsi"

# 3、保存关闭grub文件，更新grub引导，并重启
sudo update-grub


--------------------------------------------------------------------------------

国外趴好几天终于搞定hd4600 dp 4k 60hz 并成功开启hdpi！
clover config 添加kextstopath
name：AppleIntelFramebufferAzul
Find  :  0300220d 00030303 00000002 00003001
Replace: 0300220d 00030303 00000004 00000003

--------------------------------------------------------------------------------

systemctl命令是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。
任务 	              旧指令 	                        新指令
使某服务自动启动 	    chkconfig --level 3 httpd on 	  systemctl enable httpd.service
使某服务不自动启动 	  chkconfig --level 3 httpd off 	systemctl disable httpd.service
检查服务状态 	        service httpd status 	          systemctl status httpd.service （服务详细信息） systemctl is-active httpd.service （仅显示是否 Active)
显示所有已启动的服务 	  chkconfig --list 	              systemctl list-units --type=service
启动某服务 	          service httpd start 	          systemctl start httpd.service
停止某服务 	          service httpd stop 	            systemctl stop httpd.service
重启某服务 	          service httpd restart 	        systemctl restart httpd.service


实例

1.启动nfs服务
systemctl start nfs-server.service

2.设置开机自启动
systemctl enable nfs-server.service

3.停止开机自启动
systemctl disable nfs-server.service

4.查看服务当前状态
systemctl status nfs-server.service

5.重新启动某服务
systemctl restart nfs-server.service

6.查看所有已启动的服务
systemctl list -units --type=service

开启防火墙22端口
iptables -I INPUT -p tcp --dport 22 -j accept

如果仍然有问题，就可能是SELinux导致的
关闭SElinux：
修改/etc/selinux/config文件中的SELINUX=””为disabled，然后重启。

彻底关闭防火墙：
sudo systemctl status firewalld.service
sudo systemctl stop firewalld.service          
sudo systemctl disable firewalld.service


--------------------------------------------------------------------------------

你可以通过下面命令建立软件包和 debconf 选择状态的本地副本。

# dpkg --get-selections '*' > selection.dpkg
# debconf-get-selections    > selection.debconf

这里，“*” 使 “selection.dpkg” 也包含 “purge” 的软件包。

你可以将这两个文件移动到另一个电脑，并通过下列命令安装它们。

# dselect update
# debconf-set-selections < myselection.debconf
# dpkg --set-selections  < myselection.dpkg
# apt-get -u dselect-upgrade    # or dselect install

如果你需要管理一个集群中的许多服务器，并且它们的配置几乎相同，你应该考虑使用专门的软件包，例如 fai 来管理整个系统。

--------------------------------------------------------------------------------

安装前的备份：

1、备份已安装软件包列表：
sudo dpkg --get-selections > /home/user/package.selections

2、备份Home下的用户文件夹
这个文件夹类似于Windows下的Documents And Settings，包含了用户数据和软件个性化设定。如果你已经将Home放在额外的分区，这一步就不必了。复制所有用户文件夹下的所有内容到另外的分区，注意要包含隐藏文件（Ctrl Hide）

3、备份软件源列表
将/etc/apt/文件夹下的sources.list拷贝出来保存即可。

安装后的恢复：

1、还原软件源列表
复制备份的Sources.list文件到新系统的/etc/apt/目录，覆盖原文件，并替换（Ctrl H）文档中的intrepid为jaunty。然后更新软件源（sudo apt-get update）。

2、重新下载安装之前系统中的软件，如果你安装的软件数量比较多，可能会花费较长时间。
sudo dpkg --set-selections selections && sudo apt-get dselect-upgrade

3、最后将备份的主文件夹（/home/用户名）粘贴并覆盖现有主文件夹。

用这个方法我们可以基本在不丢失现有系统和软件设置的情况下使用全新的Ubuntu。



# ------------------------------------------------------------------------------
# 安装新的debian系统

# fdisk分区
Device     Boot    Start      End  Sectors  Size Id Type
/dev/sdb1           2048   616447   614400  300M  c W95 FAT32 (LBA)
/dev/sdb2         616448 17393663 16777216    8G 83 Linux
/dev/sdb3       17393664 20971519  3577856  1.7G 82 Linux swap / Solaris

# 格式化分区
sudo mkdosfs /dev/sdb1
sudo mke2fs -t ext4 /dev/sdb2
sudo mkswap /dev/sdb3

sudo sync
sudo swapon /dev/sdb3
sudo mount /dev/sdb2 /mnt/debinst

# get到debootstrap
wget http://mirrors.163.com/debian/pool/main/d/debootstrap/debootstrap_1.0.93.tar.gz
tar -xf debootstrap_0.X.X_all.tar.gz
sudo debootstrap --arch amd64 stretch /mnt/debinst http://mirrors.tuna.tsinghua.edu.cn/debian
# sudo debootstrap --arch amd64 stretch /mnt/debinst http://ftp2.cn.debian.org/debian
# sudo debootstrap --arch amd64 stretch /mnt/debinst http://mirrors.163.com/debian

# mount 必要的文件系统     
sudo mount -t proc none /mnt/debinst/proc
sudo mount -t sysfs sys /mnt/debinst/sys

# chroot到新的文件系统
LANG=C.UTF-8 sudo chroot /mnt/debinst/ /bin/bash

# 对于/dev，可以如此：
sudo mount -o bind /dev /mnt/debinst/dev
# 也可以这样，推荐这种方式：
apt install makedev
cd /dev
MAKEDEV generic

# 编辑fstab文件
# /etc/fstab: static file system information.
#
# file system    mount point   type    options                  dump pass
/dev/sdb2        /             ext4    defaults                 0    1
/dev/sdb3        none          swap    sw                       0    0
proc             /proc         proc    defaults                 0    0

/dev/fd0         /media/floppy auto    noauto,rw,sync,user,exec 0    0
/dev/cdrom       /media/cdrom  iso9660 noauto,ro,user,exec      0    0

vi /etc/fstab 
mount -a

# 设置时区，/etc/adjtime文件内容如下：
# /etc/adjtime
0.0 0 0.0
0
UTC

vi /etc/adjtime
dpkg-reconfigure tzdata

# 配置网络
# 1, 先配置网卡，在/etc/network/interfaces文件中配置，内容如下：
######################################################################
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)
# See the interfaces(5) manpage for information on what options are
# available.
######################################################################

# We always want the loopback interface.
#
auto lo
iface lo inet loopback

# To use dhcp:
#
auto enp0s8
iface enp0s8 inet dhcp

# An example static IP setup: (broadcast and gateway are optional)
#
auto enp0s3
iface enp0s3 inet static
     address 192.168.0.1
     network 192.168.0.0
     netmask 255.255.255.0
     broadcast 192.168.0.255
#     gateway 192.168.0.1

# 2, 配置nameserver，在/etc/resolv.conf文件中，内容如下：
nameserver 192.168.1.1
# nameserver fe80::1%enp0s8

# 3, 在/etc/hostname中，设置hostname，内容如下：
# /etc/hostname
pxe_1

# 4, 在/etc/hosts中，内容如下：
# /etc/hosts
127.0.0.1       localhost
127.0.0.1       pxe_1
::1             localhost ip6-localhost ip6-loopback
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

# 配置debian的源
# /etc/apt/sources.list
deb http://mirrors.163.com/debian/ stretch main non-free contrib
deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib

apt update

# 安装内核
apt install linux-headers-`uname -r`
apt install linux-image-`uname -r`

# 用swap的UUID更新resume文件，内容如下：
vi /etc/initramfs-tools/conf.d/resume
RESUME=UUID=907e9d49-5d28-4769-a020-089abe811e35

# 重新配置kernel
dpkg-reconfigure linux-image-`uname -r`

# 安装grub
apt install grub-pc
# apt install grub-efi
# grub-install /dev/sda
# update-grub

# 配置locales
apt install locales
dpkg-reconfigure locales

# 增加用户，设置秘密，修改用户的登录shell，增加sudo权限
useradd xt -m
passwd xt
vi /etc/passwd

# 安装必要的软件
apt install net-tools sudo resolvconf ssh man-db less dosfstools vim parallel build-essential bash-completion screen
vi /etc/sudoers

# 如果要安装更多的软件，可以如下：
tasksel install standard

sync & reboot

# end of 安装新的debian系统
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 配置debian系统的网络

# --使用ifconfig和route命令------
# 关闭网络接口。
ifconfig enp0s3 inet down

# 启动 eth0 并给予其新的 IP 地址和路由。
ifconfig enp0s3 inet up 192.168.0.111 netmask 255.255.255.0 broadcast 192.168.0.255
route add -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.1 dev enp0s3

# 更新后的路由表如下：
route
  Kernel IP routing table
  Destination  Gateway      Genmask        Flags Metric Ref Use Iface
  192.168.0.0  *            255.255.255.0  U     0      0     0 eth0
  10.0.0.0     192.168.0.1  255.0.0.0      UG    0      0     0 eth0

# --ip 和先前的 ifconfig 和 route 有相同功能的命令如下：-------
ip link show
ip route list
ip link set eth0 down
ip addr del dev eth0 local 192.168.0.3
ip addr add dev eth0 local 192.168.0.111/24 broadcast 192.168.0.255
ip link set eth0 up
ip route add dev eth0 to 10.0.0.0/8 src 192.168.0.111 via 192.168.0.1

# 运行的时候使用 help 参数，能让 ip 打印出命令的语法。 例如，ip link help 打印出：
     Usage: ip link set DEVICE { up | down | arp { on | off } |
                          dynamic { on | off } |
                          multicast { on | off } | txqueuelen PACKETS |
                          name NEWNAME |
                          address LLADDR | broadcast LLADDR |
                          mtu MTU }
            ip link show [ DEVICE ]

# --域名解析-------
# 域名解析器的工作是查找某个域名所对应的 IP 地址。大部分常用的域名解析器是 GNU C Library 中的 resovler 提供的功能(resolver(3))。另一个是由 libfiredns 软件包提供的 FireDNS resolver，还有其他的。

# GNU LIBC 的域名解析器对域名的解析是由 /etc/nsswitch.conf 中的 hosts 这一行配置决定的。该行列出了解析域名用的服务：例如 dns、files、nis、nisplus。参阅 nsswitch.conf(5)。 在使用 files 的情况下，域名解析器的行为是由 /etc/hosts 这个配置文件控制的。

# 在使用 dns 服务的情况下，域名解释器的行为也是由 /etc/resolv.conf 这个配置文件控制的。参阅 resolv.conf(5)。resolv.conf 的一个重要功能就是提供一个域名服务器的 IP 地址列表，通过查询这些服务器来获得域名解析。

# 如果你的域名服务器响应速度非常慢，你可能需要使用 nscd 来缓存域名解析器 libc6 查询到的结果。
sudo apt install nscd

# --使用 ifupdown 进行高级网络设置---------
# 为了让网络设置更加简单，Debian 提供了一个标准的高级网络设置工具，包含 ifup 和 ifdown 程序和 /etc/network/interfaces 文件。 [56] 如果你选择用 ifupdown 来配置你的网络，那么就不要同时使用底层工具去配置。这也意味着你不应该用其他高级配置工具，如 whereami、divine、intuitively 等。他们调用的也是底层配置工具。ifupdown 程序在设计的时候，是假设仅有这样一个程序会被用来设置网络接口的。

# 更新接口设置是执行：
ifdown eth0
editor /etc/network/interfaces  # 做你需要的调整
ifup eth0

# 假设你要配置一个以太网接口，使其拥有一个固定的 IP 地址 192.168.0.111。这个 IP 地址以 192.168.0 为开头，所以它肯定在一个 LAN 内。进一步假设 192.168.0.1 是 LAN 上面 Internet 网关的地址。编辑 /etc/network/interfaces，使其包含类似下面这段的内容：
iface eth0 inet static
       address 192.168.0.111
       netmask 255.255.255.0
       gateway 192.168.0.1

# 在接口被激活或是在激活之前，你都可以配置接口的其他部分或者进行其他操作。只要你在"up"和"down"那几行中设置合适的命令。
iface eth0 inet static
       address 192.168.0.111
       netmask 255.255.255.0
       gateway 192.168.0.1
       up route add -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.2 dev $IFACE
       down route del -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.2 dev $IFACE
       up echo Interface $IFACE going up | /usr/bin/logger -t ifup
       down echo Interface $IFACE Going down | /usr/bin/logger -t ifdown

# 你也可以选择把命令插入到 /etc/network/if-up.d 和 /etc/network/if-down.d 目录下的脚本中。这些脚本也能执行扩展的选项。详情参阅 interfaces(5)。例如，软件包 resolvconf 包含的脚本允许你在接口被激活的同时，往 /etc/resolv.conf 添加指定的 DNS 信息：
iface eth0 inet static
       address 192.168.0.111
       netmask 255.255.255.0
       gateway 192.168.0.1
       dns-search somedomain.org
       dns-nameservers 195.238.2.21 195.238.2.22

dns-search 选项的参数 somedomain.org 符合 resolv.conf(5) 中所说的 search 选项的参数。 dns-nameservers 选项的参数 195.238.2.21 和 195.238.2.22 符合选项 nameserver 的参数。其他可以识别的选项是 dns-domain 和 dns-sortlist。参阅管理域名服务器信息 – resolvconf, 第 10.4.2 节。 

# --网卡多个ip地址----------
# 使用虚拟接口，你可以设置一个以太网卡使其成为拥有很多 IP 子网的接口。例如，假设你的主机在 LAN 网络上(192.168.0.x/24)。你想要让主机连接到互联网，并用已经存在的以太网卡通过 DHCP 来获得公网 IP 地址。编辑 /etc/network/interfaces 使其包含如下一段内容：
iface eth0 inet static
       address 192.168.0.1
       netmask 255.255.255.0
       network 192.168.0.0
       broadcast 192.168.0.255
       
iface eth0:0 inet dhcp

# eth0:0 接口是一个虚拟的接口。当它被激活的时候，它的真实硬件 eth0 也会被激活。 

# end of配置debian系统的网络
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Ubuntu18.04 修改DNS
sudo vim /etc/systemd/resolved.conf

# 修改如下：
[Resolve]
DNS=202.96.128.86 202.96.128.166 

# 保存退出后，重启服务systemd-resolved.service
systemctl restart systemd-resolved.service

# 查看修改结果
systemd-resolved.service --status
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# 安装DHCP
sudo apt-get install isc-dhcp-server

# 配置DHCP
# 1, 在/etc/default/isc-dhcp-server文件中，设置dhcp请求的网卡
INTERFACES="enp0s3"

# 2, 在/etc/dhcp/dhcpd.conf文件中，设置dhcp网络：
default-lease-time 600;
max-lease-time 7200;

subnet 192.168.0.0 netmask 255.255.255.0 { 
  range 192.168.0.21 192.168.0.240; 
  option subnet-mask 255.255.255.0; 
  option routers 192.168.0.1; 
  option broadcast-address 192.168.0.255; 
  filename "pxelinux.0"; 
} 

# 重启DHCP服务
sudo /etc/init.d/isc-dhcp-server start

# end of 安装DHCP
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 安装tftp服务器
sudo apt-get install tftpd-hpa xinetd  

# 1、更改tftpd-hpa服务器的根目录，修改/etc/default/tftpd-hpa，文件内容如下：
# /etc/default/tftpd-hpa  
TFTP_USERNAME="tftp"  
TFTP_DIRECTORY="/srv/tftp"  
TFTP_ADDRESS="0.0.0.0:69"  
TFTP_OPTIONS="--secure" 

# 2、在/etc/xinetd.d目录下创建一个名叫tftp的文件，并在该文件中加入如下内容：
service tftp  
{  
     socket_type     = dgram  
     protocol        = udp  
     wait            = yes  
     user            = root  
     server          = /usr/sbin/in.tftpd  
     server_args     = -s /srv/tftp    #TFTP的根目录，自己根据需要修改，这里需要注意目录权限  
     disable         = no  
     per_source      = 11  
     cps             = 1002  
     flags           = IPv4  
}  

# 3、重启tftp服务器
sudo /etc/init.d/xinetd restart  
sudo service tftpd-hpa restart  

# 4、将debian的tftp启动文件放入/tftpboot目录中
# For PXE booting, everything you should need is set up in the netboot/netboot.tar.gz tarball. Simply extract this tarball into the tftpd boot image directory.

# end of 安装tftp服务器
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 增加路由，连通内外网

# 1. 修改/etc/sysctl.conf文件，ipv4、ipv6转发设置为1
net.ipv4.ip_forward = 1
net.ipv6.ip_forward = 1

# 2. 增加一个文件在如下目录：/etc/network/if-pre-up.d/iptables，内容如下：
#!/bin/bash
/sbin/iptables -t nat -I POSTROUTING -o enp0s8 -j MASQUERADE

# end of 增加路由，连通内外网
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# 安装ftp服务器
sudo apt install vsftpd

# 1. 修改/etc/vsftpd.conf文件，设置如下行：
listen=YES
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
use_localtime=YES
utf8_filesystem=YES

# 2. 增加一个.message文件在用户的home目录：内容如下就是一些欢迎信息，如下：
welcome to the ftp!

# 3. 重启ftp服务
/etc/init.d/vsftpd restart

# 4. 在客户端，使用ftp命令链接ftp server的ip地址，登陆用户必须是ftp server上的用户
ftp 192.168.1.9
help
binary
put
get

# end of 安装ftp服务器
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
# --Linux下的dd命令

# 1. 制作软盘镜像文件diska.img
dd if=/dev/zero of=diska.img bs=512 count=2880

# 2. 复制boot.bin到boot.img中
dd if=boot.bin of=boot.img bs=512 count=1

# 3. 复制diska.img中从第512字节往后的内容添加到boot.img中（这是dd最出彩的部分）
dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879

# 挂载iso文件
mount -o loop ~/CentOS-6.5-x86_64-bin-DVD1.iso ~/centos/

# end of Linux下的dd命令
# ------------------------------------------------------------------------------

# 制作iso启动镜像
mkisofs -r -T -J -V "make iso " -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -v -o myiso.iso ./iso_boot

# patch对源代码打补丁
patch -p1 < patch_file -d src_dir



# ------------------------------------------------------------------------------
# --系统备份------------------

# 首先到备份目录中
cd backup_dir/

# 备份系统的命令，需要sudo执行

# 完整备份整个系统，但不包括/home等目录
sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cJvpf sys_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

# 在前面完整备份的基础上，增量备份整个系统，但不包括/home等目录
sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cJvpf sys_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

# 完整备份home目录
sudo tar -C /home -g homeinfo -cJvpf home_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

# 在前面完整备份的基础上，增量备份home目录
sudo tar -C /home -g homeinfo -cJvPf home_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

# --数据还原---------

# 首先还原系统的完整备份
sudo tar -C /mnt/sdb2 --exclude=./run --exclude=./boot/efi -g sysinfo -xJvpf sys_snapshot_20180125-235658.tar.xz

#--------------------------------------
# 建立不需要备份的系统目录，设置这些目录的权限
#!/bin/bash

# usage:
# root_fs /mnt/sdb2

create_dir() {
  for ((i=4; i<=$#; i++)); do
    eval a=\$$i
    local DIR=$1/$a
#   echo $DIR $2 $3
    mkdir -p $DIR && chown $2 $DIR && chmod $3 $DIR
  done;
}

# 恢复备份时不需要备份的目录
C_OWN=root:root
create_dir $1 $C_OWN 555 proc sys
create_dir $1 $C_OWN 755 run mnt media home var/cache var/tmp 
create_dir $1 $C_OWN 777 tmp 
create_dir $1 $C_OWN 700 boot/efi

ln -s $1/run $1/var/run

# end of 建立不需要备份的系统目录，设置这些目录的权限
#--------------------------------------


# 再还原增量备份的系统文件，-g参数可以使得在完整备份后删除的文件被删除
sudo tar -C /mnt/sdb2 -g sysinfo -xJvpf sys_diff_20180203-213638.tar.xz

# 还原home目录
sudo tar -C /mnt/sdb2/home -g homeinfo -xJvpf home_snapshot_20180125-235658.tar.xz

# 再还原增量备份的home目录
sudo tar -C /mnt/sdb2/home -g homeinfo -xJvpPf home_diff_20180203-222618.tar.xz

# !!!!!!
# 如果是在新分区还原，首先修改/etc/fstab文件中的内容，uuid要与新分区匹配。
# 再chroot到新系统，用mount -a检测/etc/fstab正确无误。执行update-grub2命令更新grub启动信息。
# 如果是在新硬盘的新分区还原，要安装grub到新硬盘。

# chroot前，必须mount必要的文件系统     
sudo mount -t proc none /mnt/sdb2/proc
sudo mount -t sysfs sys /mnt/sdb2/sys

# chroot到新的文件系统
LANG=C.UTF-8 sudo chroot /mnt/sdb2 /bin/bash

# 建立新系统的/dev
apt install makedev
cd /dev
MAKEDEV generic

# 更新/etc/fstab中的UUID
vi /etc/fstab

# 用swap的UUID更新resume文件，内容如下：
vi /etc/initramfs-tools/conf.d/resume
RESUME=UUID=907e9d49-5d28-4769-a020-089abe811e35

# 重新配置kernel
dpkg-reconfigure linux-image-`uname -r`
 
# 安装和更新grub
grub-install /dev/sdb
# update-grub2

# !!!!!!


# --批量还原备份的文件---------------------------

ls sys_diff_*.tar.xz | sort | xargs -n 1 -t tar -C /mnt/sdb2 -g sysinfo -xJvpf
ls home_diff_*.tar.xz | sort | xargs -n 1 -t tar -C /mnt/sdb2/home -g homeinfo -xJvpf


# --备份win10分区------------------------

sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin -g win10info -cJvpf win10_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin -g win10info -cJvpf win10_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

# parallel 并行压缩
sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin --exclude=./games -g win10info -cvpf - . 2>tar_err.txt | parallel --pipe --recend "" -k -j6 xz -zc > win10_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C /media/xt/Win10 --exclude=./hiberfil.sys --exclude=./pagefile.sys --exclude=./swapfile.sys --exclude=./Windows/Temp --exclude=./$Recycle.Bin --exclude=./games -g win10info -cvpf - . 2>tar_err.txt | parallel --pipe --recend "" -k -j4 xz -zc > win10_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# --备份macOS分区------------------------

sudo tar -C /mnt/macos -g macOSinfo -cJvpf macOS_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz .

sudo tar -C /mnt/macos -g macOSinfo -cJvpf macOS_diff_`date +%Y%m%d-%H%M%S`.tar.xz .

sudo tar -C /mnt/macos -g macOSinfo -cvpf - . 2>err.txt | parallel --pipe --recend "" -k -j4 xz -zc > macOS_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C /mnt/macos -g macOSinfo -cvpf - . 2>err.txt | parallel --pipe --recend "" -k -j4 xz -zc > macOS_diff_`date +%Y%m%d-%H%M%S`.tar.xz


# --分区备份和恢复------------------------

# 备份分区信息，如下两个命令都可以：
sudo fdisk -l
sudo parted -l

# 备份gpt分区表：
sudo dd if=/dev/sda of=st_gpt.img bs=512 count=34

# 克隆分区到压缩文件
sudo dd if=/dev/nvme0n1p2 | parallel --pipe --recend "" -k -j4 xz -zc > macOS_snapshot_`date +%Y%m%d-%H%M%S`.img.xz

# 从压缩文件中恢复克隆的分区
parallel --pipe --recend "" -k -j4 xz -dc macOS_snapshot_20180082.img.xz | sudo dd of=/dev/nvme0n1p2

# --hfs分区的操作------------------------

# 无法挂载或者只读挂载,需要装hfsprogs来支持hfs, 用fdisk -l 命令查看磁盘
sudo apt-get install hfsprogs
sudo fsck.hfsplus -f /dev/sdb2

# 挂载hfs+分区
sudo mkdir /mnt/mac
sudo mount -t hfsplus -o force,rw /dev/sda2 /mnt/mac/
sudo mount -t hfsplus -o force,ro /dev/nvme0n1p2 /mnt/macos

# 挂载efi分区
sudo mount -o ro /dev/nvme0n1p1 /mnt/efi

# --parallel----------------------

# 第一种模式是利用 parallel传参数。管道前面进来的作为参数传给后面的命令，并行执行
# 其中{}是占位符，用来占位传入参数的位置。
seq 5 | parallel echo pre_placehoder_{}
pre_placehoder_1
pre_placehoder_2
pre_placehoder_3
pre_placehoder_4
pre_placehoder_5

# 另一种模式就是 parallel --pipe
# 这时管道前面的不是作为参数，而是标准输入传给后面的命令
cat my_large_log | parallel --pipe grep pattern 

sudo tar -C / -g sysinfo -cvpf - ./usr | parallel --pipe --recend "" -j4 -k -j4 xz -zc > usr.tar.xz

# 备份整个文件系统
sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > sys_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C / --exclude=./var/run --exclude=./var/tmp --exclude=./var/cache --exclude=./proc --exclude=./lost+found --exclude=./mnt --exclude=./sys --exclude=./run --exclude=./boot/efi --exclude=./tmp --exclude=./media --exclude=./home -g sysinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > sys_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# 备份/home目录
sudo tar -C /home -g homeinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > home_snapshot_`date +%Y%m%d-%H%M%S`.tar.xz

sudo tar -C /home -g homeinfo -cvpf - . 2>tar.err.txt | parallel --pipe --recend "" -k -j4 xz -zc > home_diff_`date +%Y%m%d-%H%M%S`.tar.xz

# end of 系统备份
# ------------------------------------------------------------------------------

# 价格man bash输出为pdf文件
man -t bash|ps2pdf - bash.pdf

# --输出重定向--------------------

# 将显示的结果输出到 list.txt 文件中，若该文件以存在则予以取代！
ls -al > list.txt

# 将显示的结果累加到 list.txt 文件中，该文件为累加的，旧数据保留！
ls -al >> list.txt

# 将显示的数据，正确的输出到 list.txt 错误的数据输出到 list.err
ls -al  1> list.txt   2> list.err

# 将显示的数据，不论正确或错误均输出到 list.txt 当中！错误与正确文件输出到同一个文件中，则必须以上面的方法来写！不能写成其它格式！
ls -al 1> list.txt 2> &1

# 将显示的数据，正确的输出到 list.txt 错误的数据则予以丢弃！ /dev/null ，可以说成是黑洞装置。为空，即不保存。
ls -al 1> list.txt 2> /dev/null


# --进程查看--------------------

# 显示同一终端下的所有程序
ps –a

# 显示有效用户的相关进程 
ps –u

# 列出较完整的信息 
ps –x

# 查询系统所有进程数据 
ps aux

# 查看不与terminal有关的进程 
ps ax

# 查看同一部分进程树状态 
ps axjf

# ps可以与grep组合一起查询，表示查看所有进程里是 java 的进程信息等等
ps -ef | grep java


# --测试磁盘读写速度--------------------

# cd到u盘目录,测试写入速度
$ dd if=/dev/zero of=./largefile bs=8k count=10
10+0 records in
10+0 records out
81920 bytes (82 MB) copied, 11.0626 s, 7.4 MB/s

# 测试读取速度 (清除缓存)
$ sudo sh -c "sync && echo 3 > /proc/sys/vm/drop_caches"     
$ dd if=./largefile of=/dev/null bs=8k
8+0 records in
8+0 records out
65536 bytes (66 MB) copied, 2.90366 s, 22.6 MB/s


# --使用deb包--------------------

# 查看deb包含有哪些文件(不安装)
dpkg -c xxx.deb // 安装前根据deb文件查看
dpkg -L debname // 安装后根据包名查看

# 安装deb包
dpkg -i xxx.deb


# 移除deb包
dpkg -r debname

# 查看某个文件属于哪个deb包
dpkg -S filepath

# 释放安装内容到dirname目录中
dpkg -X xxx.deb dirname

# 释放控制信息到当前目录下的DEBIAN子目录中
dpkg -e xxx.deb

# 清除所有已删除包的残馀配置文件
dpkg -l | grep ^rc| awk '{print $2}' | sudo xargs dpkg -P

# 列出不包括当前内核版本的其它所有内核版本：
# 输出的内容中可能会包括内核映像的如下三种状态：
#    rc：表示已经被移除
#    ii：表示符合移除条件（可移除）
#    iU：已进入 apt 安装队列，但还未被安装（不可移除）
dpkg -l | tail -n +6| grep -E 'linux-image-[0-9]+'| grep -Fv $(uname -r)

# 移除状态为 ii 的旧版「linux-image-4.4.0-21-generic」内核，可以使用如下命令：
sudo dpkg --purge linux-image-4.4.0-21-generic


# --增加私有仓库--------------------

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE
sudo add-apt-repository 'deb http://typora.io linux/'
sudo apt-get update
sudo apt-get install typora


# --so文件目录设置--------------------

如果共享库文件安装到了/usr/local/lib(很多开源的共享库都会安装到该目录下)或其它"非/lib或/usr/lib"目录下, 那么在执行ldconfig命令前, 还要把新共享库目录加入到共享库配置文件/etc/ld.so.conf中, 如下:

# cat /etc/ld.so.conf
include ld.so.conf.d/*.conf
# echo "/usr/local/lib" >> /etc/ld.so.conf
# ldconfig


# 在非KDE桌面环境下，如果安装了fcitx-module-kimpanel，可能会导致Fcitx输入中文时不显示候选词框，移除该组件，然后重启Fcixt。
$ sudo apt remove fcitx-module-kimpanel

# --wget命令参考-----------------------

# 下载website的整个内容，保存在~/tmp/目录中
wget -r -p -np -k -P ~/tmp/ http://www.qtiplot.com/doc/manual-en

# 批量增加文件的扩展名
find . -type f | xargs -I {} mv {} {}.mp3

