#pragma once

#include <memory>

#include <plus/plusdef.h>

// --

class SecureLayer {
protected:
  struct Impl;
  std::unique_ptr<Impl> _impl;

public:
  SecureLayer();
  virtual ~SecureLayer();

  void encrypt(u8vector &v) const;
  void decrypt(u8vector &v) const;
  Impl* impl() const;
};

class SecureConnector {
  struct Impl;
  std::unique_ptr<Impl> _impl;

public:
  SecureConnector(uvp::Loop *loop, const struct sockaddr *dest);
  virtual ~SecureConnector();

  void connected(const std::string &peer);
  void disconnected(const std::string &peer);
  void notify(int tag);
  size_t read(u8vlist &bufs);
  // size_t read(u8vector bufs[], size_t nbufs);
  int write(const uint8_t *p, size_t len);
};

class SecureAcceptor {
  struct Impl;
  std::unique_ptr<Impl> _impl;

public:
  SecureAcceptor(uvp::Loop *loop, const struct sockaddr *addr);
  virtual ~SecureAcceptor();

  void connected(const std::string &peer);
  void disconnected(const std::string &peer);
  size_t read(u8vlist &bufs);
  int write(const uint8_t *p, size_t len);
};
